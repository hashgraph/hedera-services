##
# Copyright (C) 2022-2024 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "ZXC: Regression"
on:
  workflow_call:
    inputs:
      panel-config:
        description: "The relative local path to the JRS panel configuration file:"
        required: true
        type: string
      ref:
        description: "The branch, tag or SHA to checkout:"
        required: false
        type: string
      branch-name:
        description: "The branch name to use when generating a slack channel name automatically:"
        required: false
        type: string
      base-branch-name:
        description: "The base branch of the pull request (if applicable):"
        required: false
        type: string
      regression-repo:
        description: ""
        required: false
        type: string
        default: "swirlds/swirlds-platform-regression"
      regression-path:
        description: ""
        required: false
        type: string
        default: "regression/assets"
      slack-results-channel:
        description: ""
        required: false
        type: string
        default: "regression-test"
      slack-summary-channel:
        description: ""
        required: false
        type: string
        default: "regression-test"
      use-branch-for-slack-channel:
        description: ""
        required: false
        type: boolean
        default: true
      use-enhanced-runtime:
        description: ""
        required: false
        type: boolean
        default: true
      platform-repo-path:
        description: ""
        required: false
        type: string
      hedera-tests-enabled:
        description: "Hedera Tests Enabled"
        required: false
        type: boolean
        default: false
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "21"
      gradle-version:
        description: "Gradle Version:"
        type: string
        required: false
        default: "wrapper"
      jrs-web-hostname:
        description: ""
        required: false
        type: string
        default: "35.247.76.217"
      jrs-web-port:
        description: ""
        required: false
        type: number
        default: 8095
      summary-bucket:
        description: ""
        required: false
        type: string
        default: "swirlds-circleci-jrs-history"
      summary-path:
        description: ""
        required: false
        type: string
        default: "regression/assets/summaryHistory"
      result-bucket:
        description: ""
        required: false
        type: string
        default: "swirlds-circleci-jrs-results"
      result-path:
        description: ""
        required: false
        type: string
        default: "regression/assets/results"
      custom-job-name:
        description: "Custom Job Name:"
        required: false
        type: string
        default: "Standard"
      enable-workflow-debug:
        description: "Workflow Debugging Enabled"
        required: false
        type: boolean
        default: false
    secrets:
      access-token:
        description: "The Github access token used to checkout the repository, submodules, and make GitHub API calls."
        required: true
      gradle-cache-username:
        description: "The username used to authenticate with the Gradle Build Cache Node."
        required: true
      gradle-cache-password:
        description: "The password used to authenticate with the Gradle Build Cache Node."
        required: true
      grafana-agent-username:
        description: "The username used to authenticate with the Grafana Agent."
        required: true
      grafana-agent-password:
        description: "The password used to authenticate with the Grafana Agent."
        required: true
      jrs-ssh-user-name:
        description: ""
        required: true
      jrs-ssh-key-file:
        description: ""
        required: true
      gcp-project-number:
        description: ""
        required: true
      gcp-sa-key-contents:
        description: ""
        required: true
      slack-api-token:
        description: "The Slack API access token used to run unit and JRS tests."
        required: true


env:
  MAVEN_OPTS: -Xmx16g -XX:ActiveProcessorCount=16
  JAVA_OPTS: -Xmx28g -XX:ActiveProcessorCount=16
  GRADLE_CACHE_USERNAME: ${{ secrets.gradle-cache-username }}
  GRADLE_CACHE_PASSWORD: ${{ secrets.gradle-cache-password }}
  #CG_EXEC: cgexec -g cpu,memory:gradle-${{ github.run_id }} --sticky ionice -c 2 -n 2 nice -n 19
  CG_EXEC: ionice -c 2 -n 2 nice -n 19
  #PING_CG_EXEC: cgexec -g cpu,memory:ping-${{ github.run_id }} --sticky ionice -c 2 -n 2 nice -n 19
  PING_CG_EXEC: ionice -c 2 -n 2 nice -n 19

defaults:
  run:
    shell: bash
    working-directory: platform-sdk

permissions:
  id-token: write
  checks: write
  contents: read

jobs:
  jrs-regression:
    name: ${{ inputs.custom-job-name || 'Standard' }}
    runs-on: network-node-linux-large
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit

      - name: Checkout Platform Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.ref || inputs.branch-name || '' }}
          fetch-depth: 0

      - name: Determine JRS Parameters
        id: jrs-parameters
        env:
          GITHUB_TOKEN: ${{ secrets.access-token }}
        run: |
          FEAT_BRANCH_EXISTS="$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/swirlds/swirlds-platform-regression/branches/${{ inputs.branch-name }})"

          BRANCH_NAME=""
          [[ "${FEAT_BRANCH_EXISTS}" -eq 200 ]] && BRANCH_NAME="${{ inputs.branch-name }}"

          if [[ -z "${BRANCH_NAME}" ]]; then
            BASE_BRANCH_EXISTS="$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/swirlds/swirlds-platform-regression/branches/${{ inputs.base-branch-name }})"
            [[ "${BASE_BRANCH_EXISTS}" -eq 200 ]] && BRANCH_NAME="${{ inputs.base-branch-name }}"
          fi

          echo "branch-name=${BRANCH_NAME}" >> "${GITHUB_OUTPUT}"

      - name: Checkout Regression Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: platform-sdk/regression
          repository: swirlds/swirlds-platform-regression
          ref: ${{ steps.jrs-parameters.outputs.branch-name }}
          token: ${{ secrets.access-token }}

      - name: Resolve JRS Configuration Path
        id: jrs-config
        working-directory: ${{ github.workspace }}/platform-sdk/${{ inputs.regression-path }}
        env:
          CONFIG_PATH: ${{ inputs.panel-config }}
        run: |
          set -x
          FINAL_PATH="${CONFIG_PATH}"
          if [[ ! -f "${FINAL_PATH}" ]]; then
            if [[ "${FINAL_PATH}" =~ ^assets\/ ]]; then
              SPATH="${FINAL_PATH#assets/}"
              [[ -f "${SPATH}" ]] && FINAL_PATH="${SPATH}"
            fi
          fi

          if [[ ! -f "${FINAL_PATH}" ]]; then
            echo "::error title=JRS Configuration Error::Unable to locate the specified JRS config file: ${FINAL_PATH}"
            exit 1
          fi

          echo "file=${FINAL_PATH}" >> "${GITHUB_OUTPUT}"

#      - name: Setup Control Groups
#        run: |
#          echo "::group::Get System Configuration"
#            USR_ID="$(id -un)"
#            GRP_ID="$(id -gn)"
#            GRADLE_MEM_LIMIT="30064771072"
#            PING_MEM_LIMIT="1073741824"
#            AGENT_MEM_LIMIT="2147483648"
#            GRADLE_GROUP_NAME="gradle-${{ github.run_id }}"
#            PING_GROUP_NAME="ping-${{ github.run_id }}"
#            AGENT_GROUP_NAME="agent-${{ github.run_id }}"
#          echo "::endgroup::"
#
#          echo "::group::Install Control Group Tools"
#            if ! command -v cgcreate >/dev/null 2>&1; then
#              sudo apt-get update
#              sudo apt-get install -y cgroup-tools
#            fi
#          echo "::endgroup::"
#
#          echo "::group::Create Control Groups"
#            sudo cgcreate -g cpu,memory:${GRADLE_GROUP_NAME} -a ${USR_ID}:${GRP_ID} -t ${USR_ID}:${GRP_ID}
#            sudo cgcreate -g cpu,memory:${PING_GROUP_NAME} -a ${USR_ID}:${GRP_ID} -t ${USR_ID}:${GRP_ID}
#            sudo cgcreate -g cpu,memory:${AGENT_GROUP_NAME} -a ${USR_ID}:${GRP_ID} -t ${USR_ID}:${GRP_ID}
#          echo "::endgroup::"
#
#          echo "::group::Set Control Group Limits"
#            cgset -r cpu.shares=768 ${GRADLE_GROUP_NAME}
#            cgset -r cpu.shares=768 ${PING_GROUP_NAME}
#            cgset -r cpu.shares=500 ${AGENT_GROUP_NAME}
#            cgset -r memory.limit_in_bytes=${GRADLE_MEM_LIMIT} ${GRADLE_GROUP_NAME}
#            cgset -r memory.limit_in_bytes=${PING_MEM_LIMIT} ${PING_GROUP_NAME}
#            cgset -r memory.limit_in_bytes=${AGENT_MEM_LIMIT} ${AGENT_GROUP_NAME}
#            cgset -r memory.memsw.limit_in_bytes=${GRADLE_MEM_LIMIT} ${GRADLE_GROUP_NAME}
#            cgset -r memory.memsw.limit_in_bytes=${PING_MEM_LIMIT} ${PING_GROUP_NAME}
#            cgset -r memory.memsw.limit_in_bytes=${AGENT_MEM_LIMIT} ${AGENT_GROUP_NAME}
#          echo "::endgroup::"
#
#          echo "::group::Move Runner Processes to Control Groups"
#            sudo cgclassify --sticky -g cpu,memory:${AGENT_GROUP_NAME} $(pgrep 'Runner.Listener' | tr '\n' ' ')
#            sudo cgclassify -g cpu,memory:${AGENT_GROUP_NAME} $(pgrep 'Runner.Worker' | tr '\n' ' ')
#          echo "::endgroup::"

      - name: Install Grafana Agent
        run: |
          sudo mkdir -p /usr/local/grafana-agent
          curl -sSL -o /tmp/grafana-agent.zip https://github.com/grafana/agent/releases/download/v0.39.1/grafana-agent-linux-amd64.zip
          sudo unzip -d /usr/local/grafana-agent /tmp/grafana-agent.zip
          sudo rm -rf /tmp/grafana-agent.zip
          sudo chmod +x /usr/local/grafana-agent/grafana-agent-linux-amd64

      - name: Install Ping Exporter
        run: |
          sudo mkdir -p /usr/local/ping-exporter
          curl -sSL -o /tmp/ping-exporter.tar.gz https://github.com/czerwonk/ping_exporter/releases/download/1.1.0/ping_exporter_1.1.0_linux_amd64.tar.gz
          sudo tar -xzf /tmp/ping-exporter.tar.gz -C /usr/local/ping-exporter
          sudo rm -rf /tmp/ping-exporter.tar.gz
          sudo chmod +x /usr/local/ping-exporter/ping_exporter

      - name: Execute Ping Exporter
        uses: JarvusInnovations/background-action@2428e7b970a846423095c79d43f759abf979a635 # v1.0.7
        with:
          run: |
            sudo setcap cap_net_raw+ep /usr/local/ping-exporter/ping_exporter
            ${PING_CG_EXEC} /usr/local/ping-exporter/ping_exporter --config.path ${{ github.workspace }}/.github/workflows/config/ping-exporter.yaml
          tail: true
          log-output: true
          wait-for: 1m
          wait-on: |
            http://localhost:9427/metrics

      - name: Execute Grafana Agent
        uses: JarvusInnovations/background-action@2428e7b970a846423095c79d43f759abf979a635 # v1.0.7
        env:
          GRAFANA_AGENT_USERNAME: ${{ secrets.grafana-agent-username }}
          GRAFANA_AGENT_PASSWORD: ${{ secrets.grafana-agent-password }}
        with:
          run: |
            ${PING_CG_EXEC} /usr/local/grafana-agent/grafana-agent-linux-amd64 -config.expand-env -config.file "${{ github.workspace }}/.github/workflows/config/grafana-agent.yaml" >> /tmp/grafana-agent.log 2>&1
          tail: true
          log-output: true
          wait-for: 1m
          wait-on: |
            http://localhost:9427/metrics

      - name: Setup NodeJS Environment
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: 18

      - name: Setup Java
        uses: actions/setup-java@8df1039502a15bceb9433410b1a100fbe190c53b # v4.5.0
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@cc4fc85e6b35bafd578d5ffbc76a5518407e1af0 # v4.2.1
        with:
          gradle-version: ${{ inputs.gradle-version }}
          gradle-home-cache-strict-match: false

      - name: Install Python Virtual Environment
        run: |
          echo "::group::Aptitude Update"
            sudo apt update
          echo "::endgroup::"

          echo "::group::Installing Python Virtual Environment"
            sudo apt install -y python3 python3-venv
          echo "::endgroup::"

      - name: Install SSH Keygen
        run: |
          if ! command -v ssh-keygen >/dev/null 2>&1; then
            echo "::group::Aptitude Update"
              sudo apt-get update
            echo "::endgroup::"
            echo "::group::Installing SSH Client"
              sudo apt-get install -y openssh-client
            echo "::endgroup::"
          fi

      - name: Install SSH key
        uses: shimataro/ssh-key-action@d4fffb50872869abe2d9a9098a6d9c5aa7d16be4 # v2.7.0
        with:
          name: jrs-ssh-keyfile
          key: ${{ secrets.jrs-ssh-key-file }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Convert SSH Key for JRS
        env:
          SSH_KEY_FILE: "jrs-ssh-keyfile"
        run: |
          cp -f "${HOME}/.ssh/${SSH_KEY_FILE}" "${HOME}/.ssh/${SSH_KEY_FILE}.pem"
          ssh-keygen -y -f "${HOME}/.ssh/${SSH_KEY_FILE}" >"${HOME}/.ssh/${SSH_KEY_FILE}.pub"

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f # v2.1.7
        with:
          workload_identity_provider: 'projects/785813846068/locations/global/workloadIdentityPools/jrs-identity-pool/providers/gh-provider'
          service_account: 'swirlds-automation@swirlds-regression.iam.gserviceaccount.com'

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@98ddc00a17442e89a24bbf282954a3b65ce6d200 # v2.1.0
        with:
          install_components: 'alpha'

      - name: Install RClone
        run: |
          curl -O -L -s https://github.com/rclone/rclone/releases/download/v1.58.1/rclone-v1.58.1-linux-amd64.deb
          sudo apt install -y ./rclone-v1.58.1-linux-amd64.deb
          rm -rf rclone-v1.58.1-linux-amd64.deb

      - name: Configure RClone Authentication
        id: rclone-auth
        env:
          GCP_KEY_CONTENTS: ${{ secrets.gcp-sa-key-contents }}
        run: |
          GCP_KEY_FILE="$(mktemp --suffix=".json" "gcp-key-file.XXXXXXXX")"
          echo -n "${GCP_KEY_CONTENTS}" | tee "${GCP_KEY_FILE}" >/dev/null
          echo "key-file=${GCP_KEY_FILE}" >> "${GITHUB_OUTPUT}"
          rclone config create gcs "google cloud storage" project_number "${{ secrets.gcp-project-number }}" service_account_file "${GCP_KEY_FILE}"

      - name: Gradle Assemble
        id: gradle-build
        working-directory: ${{ github.workspace }}
        run: ./gradlew assemble :test-clients:shadowJar --scan

      - name: Regression Gradle Assemble
        id: regression-gradle-build
        working-directory: ${{ github.workspace }}/platform-sdk/regression
        run: ./gradlew assemble --scan

      - name: Compute Actual Branch Name
        id: branch
        run: |
          REF="${{ github.head_ref || github.ref_name }}"
          REF="${REF##origin/}"

          echo "name=${REF}" >> "${GITHUB_OUTPUT}"

      - name: Retrieve Existing JRS Branch History (If Available)
        env:
          BRANCH_NAME: ${{ steps.branch.outputs.name }}
        run: |
          [[ -d "${{ inputs.summary-path }}" ]] || mkdir -p "${{ inputs.summary-path }}"
          rclone sync --gcs-bucket-policy-only --checksum --fast-list --stats-one-line -v "gcs:${{ inputs.summary-bucket }}/${BRANCH_NAME}/" "${{ inputs.summary-path }}/"

      - name: Execute JRS Regression (${{ steps.jrs-config.outputs.file }})
        env:
          HEDERA_TESTS_ENABLED: ${{ inputs.hedera-tests-enabled }}
          REGRESSION_PATH: ${{ inputs.regression-path }}
          CONFIG_PATH: ${{ steps.jrs-config.outputs.file }}
          USE_ENHANCED_RUNTIME: ${{ inputs.use-enhanced-runtime }}
          PLATFORM_REPO_PATH: ${{ inputs.platform-repo-path || format('{0}/{1}', github.workspace, 'platform-sdk') }}
          SLACK_SUMMARY: ${{ inputs.slack-summary-channel }}
          SLACK_RESULTS: ${{ inputs.slack-results-channel }}
          GENERATE_SLACK_CHANNEL: ${{ inputs.use-branch-for-slack-channel }}
          JAVA_VERSION: ${{ inputs.java-version }}
          JRS_BRANCH: ${{ inputs.branch-name || github.ref_name }}
          JRS_SSH_USER_NAME: ${{ secrets.jrs-ssh-user-name }}
          JRS_WEB_HOSTNAME: ${{ inputs.jrs-web-hostname }}
          JRS_WEB_PORT: ${{ inputs.jrs-web-port }}
          ACTIONS_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          SLACK_API_TOKEN: ${{ secrets.slack-api-token }}
        working-directory: ${{ github.workspace }}/platform-sdk/${{ inputs.regression-path }}
        run: |
          set -x

          readonly BRANCH_VERSION_REGEX="([A-Za-z]+)/?[0-9]+\.([0-9]+)\.?[0-9]*-?[A-Za-z]*\.?[0-9]*"

          if [[ -z "${{ github.actor }}" ]]; then
            JRS_USER="swirlds-automation"
          else
            JRS_USER="${{ github.actor }}"
          fi

          [[ -n "${JRS_BRANCH}" ]] || JRS_BRANCH="${{ github.job }}"

          JRS_ARGUMENTS="-po"
          JRS_ARGUMENTS="${JRS_ARGUMENTS} -u ${JRS_USER}"
          JRS_ARGUMENTS="${JRS_ARGUMENTS} -b ${JRS_BRANCH}"
          JRS_ARGUMENTS="${JRS_ARGUMENTS} -sl ${JRS_SSH_USER_NAME}"
          JRS_ARGUMENTS="${JRS_ARGUMENTS} -sk ${HOME}/.ssh/jrs-ssh-keyfile"
          JRS_ARGUMENTS="${JRS_ARGUMENTS} -wh ${JRS_WEB_HOSTNAME}"
          JRS_ARGUMENTS="${JRS_ARGUMENTS} -wp ${JRS_WEB_PORT}"
          JRS_ARGUMENTS="${JRS_ARGUMENTS} -fr"
          JRS_ARGUMENTS="${JRS_ARGUMENTS} --slack-api-token=${SLACK_API_TOKEN}"

          if [[ -n "${GENERATE_SLACK_CHANNEL}" && "${GENERATE_SLACK_CHANNEL}" = true ]]; then
            SLACK_BRANCH="${JRS_BRANCH}"
            if [[ -n "${JRS_BRANCH}" ]]; then
              if [[ "${JRS_BRANCH}" =~ ${BRANCH_VERSION_REGEX} ]]; then
                SLACK_BRANCH="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}"
              fi
            fi

            if [[ -n "${HEDERA_TESTS_ENABLED}" && "${HEDERA_TESTS_ENABLED}" = true ]]; then
              # Override for the develop branch
              if [[ "${SLACK_BRANCH}" != "develop" ]]; then
                SLACK_SUMMARY="hedera-gcp-${SLACK_BRANCH}-summary"
                SLACK_RESULTS="hedera-gcp-${SLACK_BRANCH}-regression"
              else
                SLACK_SUMMARY="hedera-regression-summary"
                SLACK_RESULTS="hedera-regression"
              fi
            else
              SLACK_SUMMARY="platform-gcp-${SLACK_BRANCH}-summary"
              SLACK_RESULTS="platform-gcp-${SLACK_BRANCH}-regression"
            fi
          fi

          if [[ -n "${SLACK_SUMMARY}" ]]; then
            JRS_ARGUMENTS="${JRS_ARGUMENTS} -sc ${SLACK_SUMMARY}"
          fi

          if [[ -n "${SLACK_RESULTS}" ]]; then
            JRS_ARGUMENTS="${JRS_ARGUMENTS} -rc ${SLACK_RESULTS}"
          fi

          if [[ -n "${JAVA_VERSION}" ]]; then
            JRS_ARGUMENTS="${JRS_ARGUMENTS} -jv ${JAVA_VERSION}"
          fi

          if [[ -n "${PLATFORM_REPO_PATH}" ]]; then
            JRS_ARGUMENTS="${JRS_ARGUMENTS} -pr ${PLATFORM_REPO_PATH}"
          fi

          if [[ -n "${HEDERA_TESTS_ENABLED}" && "${HEDERA_TESTS_ENABLED}" = true ]]; then
            JRS_ARGUMENTS="${JRS_ARGUMENTS} -r ${{ github.workspace }}"
            JRS_ARGUMENTS="${JRS_ARGUMENTS} -ci ${JRS_USER}_${ACTIONS_RUN_URL}"
          fi

          if [[ ! -f "${CONFIG_PATH}" ]]; then
            echo
            echo "Configuration File '${CONFIG_PATH}' does not exist......"
            echo
            exit 20
          fi

          if [[ -z "${JAVA_OPTS}" ]]; then
            JAVA_OPTS="-Xmx8g"
          fi

          ${CG_EXEC} java ${JAVA_OPTS} \
          -cp "lib/*:regression.jar" \
          -Dlog4j.configurationFile="log4j2-fsts-enhanced.xml" \
          -Dspring.output.ansi.enabled=ALWAYS \
          com.swirlds.fsts.Main ${JRS_ARGUMENTS} -en "Github Actions" "${CONFIG_PATH}"
          # echo exit code
          echo "Test Exit Code: $?"
      - name: Show JRS Folder Structures
        if: ${{ inputs.enable-workflow-debug && always() }}
        run: |
          if ! command -v tree >/dev/null 2>&1; then
            echo "::group::Install Tree Command"
            sudo apt update
            sudo apt install -y tree
            echo "::endgroup::"
          fi

          echo "::group::Show History Folder Contents"
          tree -apshug  "${{ inputs.summary-path }}/"
          echo "::endgroup::"

          echo "::group::Show Results Folder Contents"
          tree -apshug  "${{ inputs.result-path }}/"
          echo "::endgroup::"

          echo "::group::Show Regression Folder Contents"
          tree -apshug  "${{ inputs.regression-path }}/"
          echo "::endgroup::"

      - name: Store JRS Branch History
        if: ${{ always() }}
        env:
          BRANCH_NAME: ${{ steps.branch.outputs.name }}
        run: |
          [[ -d "${{ inputs.summary-path }}" ]] || mkdir -p "${{ inputs.summary-path }}"
          # do not use sync, since another test flow may have uploaded some test results that this test flow did not have
          rclone copy --gcs-bucket-policy-only --checksum --stats-one-line -v "${{ inputs.summary-path }}/" "gcs:${{ inputs.summary-bucket }}/${BRANCH_NAME}/"

      - name: Upload JRS Results
        env:
          JRS_USER: ${{ github.actor || 'swirlds-automation' }}
          BRANCH_NAME: ${{ steps.branch.outputs.name }}
        if: ${{ !cancelled() && always() }}
        run: |
          set -x
          [[ ! -d "${{ inputs.result-path }}" ]] && mkdir -p "${{ inputs.result-path }}"
          rclone copy --gcs-bucket-policy-only --checksum --stats-one-line -v "${{ inputs.result-path }}/" "gcs:${{ inputs.result-bucket }}/${JRS_USER}/${BRANCH_NAME}/"

      - name: Remove RClone Authentication
        if: ${{ always() }}
        env:
          GCP_KEY_FILE: ${{ steps.rclone-auth.outputs.key-file }}
        run: |
          [[ -f "${GCP_KEY_FILE}" ]] && rm -f "${GCP_KEY_FILE}"

      - name: Release Lingering GCP Resources
        if: ${{ always() }}
        env:
          REGRESSION_PATH: ${{ inputs.regression-path }}
        working-directory: ${{ github.workspace }}/platform-sdk/${{ inputs.regression-path }}
        run: |
          [[ -f "ci-gcp-instance-registry" ]] || exit 0

          while IFS='|' read -r project region instance_group;
          do
            if gcloud compute instance-groups managed delete "${instance_group}" --project "${project}" \
                  --zone "${region}" --quiet --format text > "${HOME}/release-resources.log" 2>&1; then
              echo "Terminated instance group: ${instance_group}"
            else
              echo "Failed to terminate instance group (may already be terminated): ${instance_group}"
            fi
          done < "ci-gcp-instance-registry"

          echo "<<<<<<<<<<<<<<<<<< Diagnostic Log >>>>>>>>>>>>>>>>>>"
          echo
          cat "${HOME}/release-resources.log"
          echo
          echo "<<<<<<<<<<<<<<<<<< End Diagnostic Log >>>>>>>>>>>>>>>>>>"
