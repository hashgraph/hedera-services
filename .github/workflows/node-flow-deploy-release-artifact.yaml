##
# Copyright (C) 2022-2024 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "ZXF: Deploy Production Release"
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-?*"
  workflow_dispatch:
    inputs:
      ref:
        required: true
        description: "The github ref that triggered the workflow"
#      event:
#        required: true
#        description: "The github event of the triggering workflow"

defaults:
  run:
    shell: bash

jobs:
  prepare-tag-release:
    name: Prepare Release [Tag]
    runs-on: network-node-linux-medium
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    outputs:
      version: ${{ steps.tag.outputs.version }}
      prerelease: ${{ steps.tag.outputs.prerelease }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"

      - name: Extract Tag Version
        id: tag
        run: |
          RELEASE_VERSION="$(semver get release "${{ github.ref_name }}")"
          PRERELEASE_VERSION="$(semver get prerel "${{ github.ref_name }}")"

          FINAL_VERSION="${RELEASE_VERSION}"
          PRERELEASE_FLAG="false"
          [[ -n "${PRERELEASE_VERSION}" ]] && FINAL_VERSION="${RELEASE_VERSION}-${PRERELEASE_VERSION}"
          [[ -n "${PRERELEASE_VERSION}" ]] && PRERELEASE_FLAG="true"

          echo "version=${FINAL_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "prerelease=${PRERELEASE_FLAG}" >>"${GITHUB_OUTPUT}"

  release-tag:
    name: Release [Branch]
    runs-on: network-node-linux-large
    outputs:
      new_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev \
            @semantic-release/changelog \
            @semantic-release/git \
            conventional-changelog-conventionalcommits
            
      - name: Install GnuPG Tools
        if: ${{ inputs.dry-run-enabled != true }}
        run: |
          if ! command -v gpg2 >/dev/null 2>&1; then
            echo "::group::Updating APT Repository Indices"
              sudo apt update
            echo "::endgroup::"
            echo "::group::Installing GnuPG Tools"
              sudo apt install -y gnupg2
            echo "::endgroup::"
          fi

      - name: Import GPG key
        id: gpg_key
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
        with:
          gpg_private_key: ${{ secrets.sdk-gpg-key-contents }}
          passphrase: ${{ secrets.sdk-gpg-key-passphrase }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Semantic Release
        id: semantic
        uses: semantic-release/semantic-release@05a2ea9a060e6508abf92087e8c8cc4a7a85604f # v24.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git

      - name: Call Build Release Artifact
        if: ${{ steps.semantic.outputs.new_release_published == 'true' }}
        uses: ./.github/workflows/node-zxc-build-release-artifact.yaml
        with:
          version-policy: branch-commit
          trigger-env-deploy: integration
          release-profile: DevelopCommit
          new-version: ${{ steps.semantic.outputs.new_release_version }}
        secrets:
          access-token: ${{ secrets.GITHUB_TOKEN }}
          bucket-name: ${{ secrets.RELEASE_ARTIFACT_BUCKET_NAME }}
          cdn-bucket-name: ${{ secrets.CDN_ARTIFACT_BUCKET_NAME }}
          svcs-ossrh-username: ${{ secrets.SVCS_OSSRH_USERNAME }}
          svcs-ossrh-password: ${{ secrets.SVCS_OSSRH_PASSWORD }}
          svcs-gpg-key-contents: ${{ secrets.SVCS_GPG_KEY_CONTENTS }}
          svcs-gpg-key-passphrase: ${{ secrets.SVCS_GPG_KEY_PASSPHRASE }}
          sdk-ossrh-username: ${{ secrets.PLATFORM_OSSRH_USERNAME }}
          sdk-ossrh-password: ${{ secrets.PLATFORM_OSSRH_PASSWORD }}
          sdk-gpg-key-contents: ${{ secrets.PLATFORM_GPG_KEY_CONTENTS }}
          sdk-gpg-key-passphrase: ${{ secrets.PLATFORM_GPG_KEY_PASSPHRASE }}
          slack-webhook-url: ${{ secrets.PLATFORM_SLACK_RELEASE_WEBHOOK }}
          jf-url: ${{ vars.JF_URL }}
          jf-docker-registry: ${{ vars.JF_DOCKER_REGISTRY }}
          jf-user-name: ${{ vars.JF_USER_NAME }}
          jf-access-token: ${{ secrets.JF_ACCESS_TOKEN }}

  release-branch:
    name: Release [Branch]
    uses: ./.github/workflows/node-zxc-build-release-artifact.yaml
    if: ${{ github.event_name == 'workflow_dispatch' }}
    with:
      version-policy: branch-commit
      trigger-env-deploy: integration
      release-profile: DevelopCommit
    secrets:
      access-token: ${{ secrets.GITHUB_TOKEN }}
      bucket-name: ${{ secrets.RELEASE_ARTIFACT_BUCKET_NAME }}
      cdn-bucket-name: ${{ secrets.CDN_ARTIFACT_BUCKET_NAME }}
      svcs-ossrh-username: ${{ secrets.SVCS_OSSRH_USERNAME }}
      svcs-ossrh-password: ${{ secrets.SVCS_OSSRH_PASSWORD }}
      svcs-gpg-key-contents: ${{ secrets.SVCS_GPG_KEY_CONTENTS }}
      svcs-gpg-key-passphrase: ${{ secrets.SVCS_GPG_KEY_PASSPHRASE }}
      sdk-ossrh-username: ${{ secrets.PLATFORM_OSSRH_USERNAME }}
      sdk-ossrh-password: ${{ secrets.PLATFORM_OSSRH_PASSWORD }}
      sdk-gpg-key-contents: ${{ secrets.PLATFORM_GPG_KEY_CONTENTS }}
      sdk-gpg-key-passphrase: ${{ secrets.PLATFORM_GPG_KEY_PASSPHRASE }}
      slack-webhook-url: ${{ secrets.PLATFORM_SLACK_RELEASE_WEBHOOK }}
      jf-url: ${{ vars.JF_URL }}
      jf-docker-registry: ${{ vars.JF_DOCKER_REGISTRY }}
      jf-user-name: ${{ vars.JF_USER_NAME }}
      jf-access-token: ${{ secrets.JF_ACCESS_TOKEN }}

  deploy-ci-trigger:
    name: Trigger CI Flows
    runs-on: network-node-linux-medium
    needs:
      - release-branch
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: '0'
          ref: develop
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Trigger ZXF Prepare Extended Test Suite
        if: ${{ needs.release-branch.result == 'success' }}
        uses: step-security/workflow-dispatch@4d1049025980f72b1327cbfdeecb07fe7a20f577 # v1.2.4
        with:
          workflow: .github/workflows/zxf-prepare-extended-test-suite.yaml
          repo: hashgraph/hedera-services # ensure we are executing in the hashgraph org
          ref: develop # ensure we are always using the workflow definition from the develop branch
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          inputs: '{ "ref": "${{ inputs.ref }}" }'

#      - name: Trigger ZXF Deploy Integration
#        if: ${{ needs.release-branch.result == 'success' }}
#        uses: step-security/workflow-dispatch@4d1049025980f72b1327cbfdeecb07fe7a20f577 # v1.2.4
#        with:
#          workflow: .github/workflows/node-zxf-deploy-integration.yaml
#          repo: hashgraph/hedera-services # ensure we are executing in the hashgraph org
#          ref: develop # ensure we are always using the workflow definition from the develop branch
#          token: ${{ secrets.GH_ACCESS_TOKEN }}
#          inputs: '{ "event": "${{ inputs.event }}" }'
