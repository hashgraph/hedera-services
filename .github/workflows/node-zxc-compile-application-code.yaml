##
# Copyright (C) 2022-2024 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "ZXC: [Node] Compile Application Code"
on:
  workflow_call:
    inputs:
      enable-unit-tests:
        description: "Unit Testing Enabled"
        type: boolean
        required: false
        default: false
      enable-e2e-tests:
        description: "End to End Testing Enabled"
        type: boolean
        required: false
        default: false
      enable-integration-tests:
        description: "Integration Testing Enabled"
        type: boolean
        required: false
        default: false
      enable-hapi-tests-misc:
        description: "HAPI Testing (misc) Enabled"
        type: boolean
        required: false
        default: false
      enable-hapi-tests-crypto:
        description: "HAPI Testing (crypto) Enabled"
        type: boolean
        required: false
        default: false
      enable-hapi-tests-token:
        description: "HAPI Testing (token) Enabled"
        type: boolean
        required: false
        default: false
      enable-hapi-tests-smart-contract:
        description: "HAPI Testing (smart contract) Enabled"
        type: boolean
        required: false
        default: false
      enable-hapi-tests-time-consuming:
        description: "HAPI Testing (time consuming) Enabled"
        type: boolean
        required: false
        default: false
      enable-hapi-tests-restart:
        description: "HAPI Testing (restart) Enabled"
        type: boolean
        required: false
        default: false
      enable-hapi-tests-nd-reconnect:
        description: "HAPI Testing (node death reconnect) Enabled"
        type: boolean
        required: false
        default: false
      enable-spotless-check:
        description: "Spotless Check Enabled"
        type: boolean
        required: false
        default: false
      enable-dependency-check:
        description: "Dependency Scope Check Enabled"
        type: boolean
        required: false
        default: false
      enable-snyk-scan:
        description: "Snyk Scan Enabled"
        type: boolean
        required: false
        default: false
      enable-network-log-capture:
        description: "Network Log Capture Enabled"
        type: boolean
        required: false
        default: false
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "21.0.1"
      node-version:
        description: "NodeJS Version:"
        type: string
        required: false
        default: "16"
      custom-job-label:
        description: "Custom Job Label:"
        type: string
        required: false
        default: "Compiles"

    secrets:
      access-token:
        description: "The Github access token used to checkout the repository, submodules, and make GitHub API calls."
        required: true
      gradle-cache-username:
        description: "The username used to authenticate with the Gradle Build Cache Node."
        required: true
      gradle-cache-password:
        description: "The password used to authenticate with the Gradle Build Cache Node."
        required: true
      snyk-token:
        description: "The Snyk access token is used by Snyk to analyze the code for vulnerabilities "
        required: false
      codacy-project-token:
        description: "The Codacy project token used to report code coverage."
        required: false

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  actions: read
  pull-requests: write
  statuses: write
  checks: write
  contents: read

env:
  GRADLE_CACHE_USERNAME: ${{ secrets.gradle-cache-username }}
  GRADLE_CACHE_PASSWORD: ${{ secrets.gradle-cache-password }}
  GRADLE_EXEC: cgexec -g cpu,memory:gradle-${{ github.run_id }} --sticky ionice -c 2 -n 2 nice -n 19 ./gradlew
  CG_EXEC: cgexec -g cpu,memory:gradle-${{ github.run_id }} --sticky ionice -c 2 -n 2 nice -n 19

jobs:
  compile:
    name: ${{ inputs.custom-job-label || 'Compiles' }}
    runs-on: [self-hosted, Linux, large, ephemeral]
    steps:
      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Expand Shallow Clone for and Spotless
        if: ${{ (inputs.enable-unit-tests || inputs.enable-spotless-check) && !cancelled() }}
        run: git fetch --unshallow --no-recurse-submodules

      - name: Setup Java
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@29c0906b64b8fc82467890bfb7a0a7ef34bda89e # v3.1.0
        with:
          cache-read-only: false

      - name: Setup NodeJS
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ inputs.node-version }}

      - name: Setup Control Groups
        run: |
          echo "::group::Get System Configuration"
            USR_ID="$(id -un)"
            GRP_ID="$(id -gn)"
            GRADLE_MEM_LIMIT="30064771072"
            AGENT_MEM_LIMIT="2147483648"
            GRADLE_GROUP_NAME="gradle-${{ github.run_id }}"
            AGENT_GROUP_NAME="agent-${{ github.run_id }}"
          echo "::endgroup::"

          echo "::group::Install Control Group Tools"
            if ! command -v cgcreate >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y cgroup-tools
            fi
          echo "::endgroup::"

          echo "::group::Create Control Groups"
            sudo cgcreate -g cpu,memory:${GRADLE_GROUP_NAME} -a ${USR_ID}:${GRP_ID} -t ${USR_ID}:${GRP_ID}
            sudo cgcreate -g cpu,memory:${AGENT_GROUP_NAME} -a ${USR_ID}:${GRP_ID} -t ${USR_ID}:${GRP_ID}
          echo "::endgroup::"

          echo "::group::Set Control Group Limits"
            cgset -r cpu.shares=768 ${GRADLE_GROUP_NAME}
            cgset -r cpu.shares=500 ${AGENT_GROUP_NAME}
            cgset -r memory.limit_in_bytes=${GRADLE_MEM_LIMIT} ${GRADLE_GROUP_NAME}
            cgset -r memory.limit_in_bytes=${AGENT_MEM_LIMIT} ${AGENT_GROUP_NAME}
            cgset -r memory.memsw.limit_in_bytes=${GRADLE_MEM_LIMIT} ${GRADLE_GROUP_NAME}
            cgset -r memory.memsw.limit_in_bytes=${AGENT_MEM_LIMIT} ${AGENT_GROUP_NAME}
          echo "::endgroup::"

          echo "::group::Move Runner Processes to Control Groups"
            sudo cgclassify --sticky -g cpu,memory:${AGENT_GROUP_NAME} $(pgrep 'Runner.Listener' | tr '\n' ' ')
            sudo cgclassify -g cpu,memory:${AGENT_GROUP_NAME} $(pgrep 'Runner.Worker' | tr '\n' ' ')
          echo "::endgroup::"

      - name: Compile
        id: gradle-build
        run: ${GRADLE_EXEC} assemble --scan

      - name: Spotless Check
        if: ${{ inputs.enable-spotless-check && !cancelled() }}
        run: ${GRADLE_EXEC} spotlessCheck --scan

      - name: Gradle Dependency Scopes Check
        if: ${{ inputs.enable-dependency-check && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        run: ${GRADLE_EXEC} checkAllModuleInfo --scan --continue

      - name: Unit Testing
        id: gradle-test
        if: ${{ inputs.enable-unit-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        run: ${GRADLE_EXEC} test timingSensitive jacocoTestReport --continue --scan

      - name: Publish Unit Test Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-unit-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: Unit Test Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/test/TEST-*.xml"

      - name: Upload Unit Test Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-unit-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: unit-test-report
          path: "**/build/test-results/test/TEST-*.xml"

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        if: ${{ (inputs.enable-integration-tests || inputs.enable-e2e-tests) && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          version: v0.11.0

      - name: Build Docker Image # build the image for hedera-node
        if: ${{ (inputs.enable-integration-tests || inputs.enable-e2e-tests) && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        run: ${GRADLE_EXEC} createDockerImage --scan

      - name: Integration Testing
        id: gradle-itest
        if: ${{ inputs.enable-integration-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        run: ${GRADLE_EXEC} itest --scan

      - name: Publish Integration Test Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-integration-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: Integration Test Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/itest/TEST-*.xml"

      - name: Upload Integration Test Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-integration-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: integration-test-report
          path: "**/build/test-results/itest/TEST-*.xml"

      - name: Publish Integration Test Network Logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-integration-tests && inputs.enable-network-log-capture && !cancelled() }}
        with:
          name: Integration Test Network Logs
          path: |
            hedera-node/test-clients/build/network/itest/output/**

      - name: HAPI Testing (Misc)
        id: gradle-hapi-misc
        if: ${{ inputs.enable-hapi-tests-misc && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        env:
          LC_ALL: en.UTF-8
          LANG: en_US.UTF-8
        run: ${GRADLE_EXEC} hapiTestMisc -Dfile.encoding=UTF-8 --scan --no-daemon

      - name: Publish HAPI Test (Misc) Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-hapi-tests-misc && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: HAPI Test (Misc) Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/hapiTestMisc/TEST-*.xml"

      - name: Upload HAPI Test (Misc) Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-misc && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: hapi-test-misc-report
          path: "**/build/test-results/hapiTestMisc/TEST-*.xml"

      - name: Publish HAPI Test (Misc) Network Logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-misc && inputs.enable-network-log-capture && !cancelled() }}
        with:
          name: HAPI Test (Misc) Network Logs
          path: |
            hedera-node/test-clients/build/hapi-test/**/output/**

      - name: HAPI Testing (Crypto)
        id: gradle-hapi-crypto
        if: ${{ inputs.enable-hapi-tests-crypto && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        env:
          LC_ALL: en.UTF-8
          LANG: en_US.UTF-8
        run: ${GRADLE_EXEC} hapiTestCrypto -Dfile.encoding=UTF-8 --scan

      - name: Publish HAPI Test (Crypto) Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-hapi-tests-crypto && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: HAPI Test (Crypto) Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/hapiTestCrypto/TEST-*.xml"

      - name: Upload HAPI Test (Crypto) Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-crypto && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: hapi-test-crypto-report
          path: "**/build/test-results/hapiTestCrypto/TEST-*.xml"

      - name: Publish HAPI Test (crypto) Network Logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-crypto && inputs.enable-network-log-capture && !cancelled() }}
        with:
          name: HAPI Test (Crypto) Network Logs
          path: |
            hedera-node/test-clients/build/hapi-test/**/output/**

      - name: HAPI Testing (Token)
        id: gradle-hapi-token
        if: ${{ inputs.enable-hapi-tests-token && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        env:
          LC_ALL: en.UTF-8
          LANG: en_US.UTF-8
        run: ${GRADLE_EXEC} hapiTestToken -Dfile.encoding=UTF-8 --scan

      - name: Publish HAPI Test (Token) Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-hapi-tests-token && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: HAPI Test (Token) Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/hapiTestToken/TEST-*.xml"

      - name: Upload HAPI Test (Token) Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-token && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: hapi-test-token-report
          path: "**/build/test-results/hapiTestToken/TEST-*.xml"

      - name: Publish HAPI Test (Token) Network Logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-token && inputs.enable-network-log-capture && !cancelled() }}
        with:
          name: HAPI Test (Token) Network Logs
          path: |
            hedera-node/test-clients/build/hapi-test/**/output/**

      - name: HAPI Testing (Smart Contract)
        id: gradle-hapi-smart-contract
        if: ${{ inputs.enable-hapi-tests-smart-contract && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        env:
          LC_ALL: en.UTF-8
          LANG: en_US.UTF-8
        run: ${GRADLE_EXEC} hapiTestSmartContract -Dfile.encoding=UTF-8 --scan

      - name: Publish HAPI Test (Smart Contract) Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-hapi-tests-smart-contract && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: HAPI Test (Smart Contract) Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/hapiTestSmartContract/TEST-*.xml"

      - name: Upload HAPI Test (Smart Contract) Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-smart-contract && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: hapi-test-smart-contract-report
          path: "**/build/test-results/hapiTestSmartContract/TEST-*.xml"

      - name: Publish HAPI Test (Smart Contract) Network Logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-smart-contract && inputs.enable-network-log-capture && !cancelled() }}
        with:
          name: HAPI Test (Smart Contract) Network Logs
          path: |
            hedera-node/test-clients/build/hapi-test/**/output/**

      - name: HAPI Testing (Time Consuming)
        id: gradle-hapi-time-consuming
        if: ${{ inputs.enable-hapi-tests-time-consuming && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        env:
          LC_ALL: en.UTF-8
          LANG: en_US.UTF-8
        run: ${GRADLE_EXEC} hapiTestTimeConsuming -Dfile.encoding=UTF-8 --scan

      - name: Publish HAPI Test (Time Consuming) Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-hapi-tests-time-consuming && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: HAPI Test (Time Consuming) Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/hapiTestTimeConsuming/TEST-*.xml"

      - name: Upload HAPI Test (Time Consuming) Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-time-consuming && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: hapi-test-time-consuming-report
          path: "**/build/test-results/hapiTestTimeConsuming/TEST-*.xml"

      - name: Publish HAPI Test (Time Consuming) Network Logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-time-consuming && inputs.enable-network-log-capture && !cancelled() }}
        with:
          name: HAPI Test (Time Consuming) Network Logs
          path: |
            hedera-node/test-clients/build/hapi-test/**/output/**

      - name: HAPI Testing (Restart)
        id: gradle-hapi-restart
        if: ${{ inputs.enable-hapi-tests-restart && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        env:
          LC_ALL: en.UTF-8
          LANG: en_US.UTF-8
        run: ${GRADLE_EXEC} hapiTestRestart -Dfile.encoding=UTF-8 --scan

      - name: Publish HAPI Test (Restart) Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-hapi-tests-restart && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: HAPI Test (Restart) Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/hapiTestRestart/TEST-*.xml"

      - name: Upload HAPI Test (Restart) Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-restart && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: hapi-test-restart-report
          path: "**/build/test-results/hapiTestRestart/TEST-*.xml"

      - name: Publish HAPI Test (Restart) Network Logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-restart && inputs.enable-network-log-capture && !cancelled() }}
        with:
          name: HAPI Test (Restart) Network Logs
          path: |
            hedera-node/test-clients/build/hapi-test/**/output/**
            hedera-node/test-clients/build/hapi-test/*.log

      - name: HAPI Testing (Node Death Reconnect)
        id: gradle-hapi-nd-reconnect
        if: ${{ inputs.enable-hapi-tests-nd-reconnect && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        env:
          LC_ALL: en.UTF-8
          LANG: en_US.UTF-8
        run: ${GRADLE_EXEC} hapiTestNDReconnect -Dfile.encoding=UTF-8 --scan

      - name: Publish HAPI Test (Node Death Reconnect) Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-hapi-tests-nd-reconnect && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: HAPI Test (Node Death Reconnect) Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/hapiTestNDReconnect/TEST-*.xml"

      - name: Upload HAPI Test (Node Death Reconnect) Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-nd-reconnect && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: hapi-test-node-death-reconnect-report
          path: "**/build/test-results/hapiTestNDReconnect/TEST-*.xml"

      - name: Publish HAPI Test (Node Death Reconnect) Network Logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-hapi-tests-nd-reconnect && inputs.enable-network-log-capture && !cancelled() }}
        with:
          name: HAPI Test (Node Death Reconnect) Network Logs
          path: |
            hedera-node/test-clients/build/hapi-test/**/output/**
            hedera-node/test-clients/build/hapi-test/*.log

      - name: E2E Testing
        id: gradle-eet
        if: ${{ inputs.enable-e2e-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        run: ${GRADLE_EXEC} eet --scan

      - name: Publish E2E Test Report
        uses: actionite/publish-unit-test-result-action@1e01e49081c6c4073913aa4b7980fa83e709f322 # v2.3.0
        if: ${{ inputs.enable-e2e-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          check_name: 'Node: E2E Test Results'
          check_run_disabled: false
          json_thousands_separator: ','
          junit_files: "**/build/test-results/eet/TEST-*.xml"

      - name: Upload E2E Test Report Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-e2e-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          name: e2e-test-report
          path: "**/build/test-results/eet/TEST-*.xml"

      - name: Publish E2E Test Network Logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-e2e-tests && inputs.enable-network-log-capture && !cancelled() }}
        with:
          name: E2E Test Network Logs
          path: |
            hedera-node/test-clients/build/network/eet/output/**

      - name: Publish To Codecov
        if: ${{ inputs.enable-unit-tests && !cancelled() }}
        uses: codecov/codecov-action@54bcd8715eee62d40e33596ef5e8f0f48dbbccab # v4.1.0

      - name: Publish to Codacy
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.codacy-project-token }}
        if: ${{ inputs.enable-unit-tests && !cancelled() }}
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Java $(find . -name 'jacoco*.xml' -printf '-r %p ')

      - name: Publish Test Reports
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ inputs.enable-unit-tests && !cancelled() }}
        with:
          name: Test Reports
          path: "**/build/reports/tests/**"

      - name: Disable Gradle Configuration Cache
        if: >-
          ${{
            inputs.enable-snyk-scan &&
            steps.gradle-build.conclusion == 'success' &&
            (
              github.event.pull_request.head.repo.full_name == github.repository ||
              github.event_name == 'push' ||
              github.event_name == 'workflow_dispatch'
            ) &&
            !cancelled()
          }}
        run: sed -i 's/^org.gradle.configuration-cache=.*$/org.gradle.configuration-cache=false/' gradle.properties

      - name: Setup Snyk
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}
        if: >-
          ${{
            inputs.enable-snyk-scan &&
            steps.gradle-build.conclusion == 'success' &&
            (
              github.event.pull_request.head.repo.full_name == github.repository ||
              github.event_name == 'push' ||
              github.event_name == 'workflow_dispatch'
            ) &&
            !cancelled()
          }}
        run: ${CG_EXEC} npm install -g snyk snyk-to-html @wcj/html-to-markdown-cli

      - name: Snyk Scan
        id: snyk
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}
        if: >-
          ${{
            inputs.enable-snyk-scan &&
            steps.gradle-build.conclusion == 'success' &&
            (
              github.event.pull_request.head.repo.full_name == github.repository ||
              github.event_name == 'push' ||
              github.event_name == 'workflow_dispatch'
            ) &&
            !cancelled()
          }}
        run: ${CG_EXEC} snyk test --all-sub-projects --severity-threshold=high --policy-path=.snyk --json-file-output=snyk-test.json

      - name: Snyk Code
        id: snyk-code
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}
        if: >-
          ${{
            inputs.enable-snyk-scan &&
            steps.gradle-build.conclusion == 'success' &&
            (
              github.event.pull_request.head.repo.full_name == github.repository ||
              github.event_name == 'push' ||
              github.event_name == 'workflow_dispatch'
            ) &&
            !cancelled()
          }}
        run: ${CG_EXEC} snyk code test --severity-threshold=high --json-file-output=snyk-code.json

      - name: Publish Snyk Results
        if: >-
          ${{
            inputs.enable-snyk-scan &&
            steps.gradle-build.conclusion == 'success' &&
            (
              github.event.pull_request.head.repo.full_name == github.repository ||
              github.event_name == 'push' ||
              github.event_name == 'workflow_dispatch'
            ) &&
            !cancelled()
          }}
        run: |
          if [[ -f "snyk-test.json" && -n "$(cat snyk-test.json | tr -d '[:space:]')" ]]; then
            snyk-to-html -i snyk-test.json -o snyk-test.html --summary
            html-to-markdown snyk-test.html -o snyk
            cat snyk/snyk-test.html.md >> $GITHUB_STEP_SUMMARY
          fi

          if [[ -f "snyk-code.json" && -n "$(cat snyk-code.json | tr -d '[:space:]')" ]]; then
            snyk-to-html -i snyk-code.json -o snyk-code.html --summary
            html-to-markdown snyk-code.html -o snyk
            cat snyk/snyk-code.html.md >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check Snyk Files
        if: ${{ always() }}
        run: |
          echo "::group::Snyk File List"
            ls -lah snyk* || true
          echo "::endgroup::"

          echo "::group::Snyk Test Contents"
            cat snyk-test.json || true
          echo "::endgroup::"

          echo "::group::Snyk Code Contents"
            cat snyk-code.json || true
          echo "::endgroup::"
