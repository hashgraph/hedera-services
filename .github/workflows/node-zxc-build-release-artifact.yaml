##
# Copyright (C) 2022-2024 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "ZXC: [Node] Deploy Release Artifacts"
on:
  workflow_call:
    inputs:
      # Valid version policies are as follows: specified, branch-commit, adhoc-commit
      version-policy:
        description: "Version Policy:"
        type: string
        required: true
      # Valid options are none, integration, and preview
      trigger-env-deploy:
        description: "Deploy to Environment:"
        type: string
        required: true
        default: "none"
      # Valid release profiles are as follows:
      # - none
      # - AdhocCommit
      # - DevelopCommit
      # - DevelopDailySnapshot
      # - DevelopSnapshot
      # - PrereleaseChannel
      release-profile:
        description: "Release Profile:"
        type: string
        required: true
        default: "none"
      new-version:
        description: "New Version:"
        type: string
        required: false
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "21"
      gradle-version:
        description: "Gradle Version:"
        type: string
        required: false
        default: "wrapper"

    secrets:
      access-token:
        required: true
      bucket-name:
        required: true
      cdn-bucket-name:
        required: true
      svcs-ossrh-username:
        required: true
      svcs-ossrh-password:
        required: true
      svcs-gpg-key-contents:
        required: true
      svcs-gpg-key-passphrase:
        required: true
      sdk-ossrh-username:
        required: true
      sdk-ossrh-password:
        required: true
      sdk-gpg-key-contents:
        required: true
      sdk-gpg-key-passphrase:
        required: true
      slack-webhook-url:
        required: true
      jf-url:
        required: true
      jf-user-name:
        required: true
      jf-docker-registry:
        required: true
      jf-access-token:
        required: true
      jenkins-integration-url:
        required: false

defaults:
  run:
    shell: bash

env:
  LC_ALL: C.UTF-8
  DOCKER_MANIFEST_GENERATOR: .github/workflows/support/scripts/generate-docker-artifact-baseline.sh
  DOCKER_MANIFEST_PATH: ${{ github.workspace }}/.manifests/docker
  SKOPEO_VERSION: v1.14.0

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: Validate
    runs-on: network-node-linux-large
    outputs:
      branch-name: ${{ steps.parameters.outputs.branch-name }}
      branch-name-lower: ${{ steps.parameters.outputs.branch-name-lower }}
      branch-name-safe: ${{ steps.parameters.outputs.branch-name-safe }}
      commit-prefix: ${{ steps.parameters.outputs.commit-prefix }}
      commit-id: ${{ steps.parameters.outputs.commit-id }}
      commit-id-short: ${{ steps.parameters.outputs.commit-id-short }}
      version: ${{ steps.effective-version.outputs.number }}
      version-prefix: ${{ steps.effective-version.outputs.prefix }}
      prerelease: ${{ steps.effective-version.outputs.prerelease }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"

      - name: Verify Workflow Parameters
        id: parameters
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME="${BRANCH_NAME##origin/}"
          BRANCH_NAME_LOWER="$(echo "${BRANCH_NAME}" | tr '[:upper:]' '[:lower:]')"
          BRANCH_NAME_SAFE="$(echo "${BRANCH_NAME_LOWER}" | tr '/' '-' | tr '_' '.')"

          COMMIT_PREFIX="adhoc"
          [[ "${{ inputs.version-policy }}" == "branch-commit" ]] && COMMIT_PREFIX="${BRANCH_NAME_SAFE}"

          echo "branch-name=${BRANCH_NAME}" >>"${GITHUB_OUTPUT}"
          echo "branch-name-lower=${BRANCH_NAME_LOWER}" >>"${GITHUB_OUTPUT}"
          echo "branch-name-safe=${BRANCH_NAME_SAFE}" >>"${GITHUB_OUTPUT}"
          echo "commit-prefix=${COMMIT_PREFIX}" >>"${GITHUB_OUTPUT}"
          echo "commit-id=${{ github.sha }}" >>"${GITHUB_OUTPUT}"
          echo "commit-id-short=$(echo "${{ github.sha }}" | cut -c1-8)" >>"${GITHUB_OUTPUT}"

      - name: Verify Version Update (As Specified)
        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        run: |
          VALID_VERSION="$(semver validate "${{ inputs.new-version }}")"

          if [[ "${VALID_VERSION}" != "valid" ]]; then
            echo "::error title=Version Error::The supplied new-version parameter (${{ inputs.new-version }}) is invalid and does not conform to the semantic versioning specifications."
            exit 2
          fi

      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Java
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        with:
          gradle-version: ${{ inputs.gradle-version }}

      - name: Gradle Update Version (As Specified)
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: versionAsSpecified -PnewVersion=${{ inputs.new-version }} --scan

      - name: Gradle Update Version (Branch Commit)
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        if: ${{ inputs.version-policy != 'specified' && !cancelled() && !failure() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: versionAsPrefixedCommit -PcommitPrefix=${{ steps.parameters.outputs.commit-prefix }} --scan

      - name: Compute Final Effective Version
        id: effective-version
        run: |
          EFF_VERSION="$(./gradlew showVersion --quiet | tr -d '[:space:]')"
          PRERELEASE_SUFFIX="$(semver get prerel "${EFF_VERSION}")"
          PRERELEASE="false"
          [[ -n "${PRERELEASE_SUFFIX}" ]] && PRERELEASE="true"

          MAJOR_VERSION="$(semver get major "${EFF_VERSION}")"
          MINOR_VERSION="$(semver get minor "${EFF_VERSION}")"

          echo "number=${EFF_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "prefix=${MAJOR_VERSION}.${MINOR_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "prerelease=${PRERELEASE}" >>"${GITHUB_OUTPUT}"

      - name: Cache Build Version
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # v4.0.1
        with:
          path: version.txt
          key: node-build-version-${{ steps.effective-version.outputs.number }}-${{ github.sha }}

  build-artifact:
    name: Build Artifact
    runs-on: network-node-linux-large
    needs:
      - validate
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Install Deterministic Zip Tooling
        run: |
          echo "::group::Download Binary"
          sudo curl -L -o /usr/local/bin/deterministic-zip https://github.com/timo-reymann/deterministic-zip/releases/download/1.2.0/deterministic-zip_linux-amd64
          echo "::endgroup::"
          echo "::group::Change Binary Permissions"
          sudo chmod -v +x /usr/local/bin/deterministic-zip
          echo "::endgroup::"
          echo "::group::Show Binary Version Info"
          deterministic-zip --version
          echo "::endgroup::"

      - name: Install JSON Tools
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            echo "::group::Setup JQ Command"
            sudo apt update
            sudo apt install -y jq
            echo "::endgroup::"
          fi

          JQ_VERSION="$(jq --version)"
          if [[ "${JQ_VERSION}" != "jq-1.6" ]]; then
            echo "::group::Updating JQ Version"
            sudo apt update
            sudo apt upgrade -y jq
            echo "::endgroup::"
          fi

          if ! command -v tee >/dev/null 2>&1; then
            echo "::group::Setup Tee Command"
            sudo apt update
            sudo apt install -y coreutils
            echo "::endgroup::"
          fi

          echo "::group::Show JQ Version"
          jq --version
          echo "::endgroup::"

      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c # v2.1.2
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "hedera-artifact-builds@devops-1-254919.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@98ddc00a17442e89a24bbf282954a3b65ce6d200 # v2.1.0
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}

      - name: Setup Java
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        with:
          gradle-version: ${{ inputs.gradle-version }}

      - name: Restore Build Version
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # v4.0.1
        with:
          fail-on-cache-miss: true
          path: version.txt
          key: node-build-version-${{ needs.validate.outputs.version }}-${{ github.sha }}

      - name: Cache Build Artifacts
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # v4.0.1
        with:
          path: ~/artifact-build
          key: node-build-artifacts-${{ needs.validate.outputs.version }}-${{ github.sha }}

      - name: Gradle Assemble
        id: gradle-build
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: assemble --scan

      - name: Gradle Version Summary
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: githubVersionSummary --scan

      - name: Stage Artifact Build Folder
        id: artifact-staging
        run: |
          BUILD_BASE_DIR="${HOME}/artifact-build"
          mkdir -p "${BUILD_BASE_DIR}/data/lib"
          mkdir -p "${BUILD_BASE_DIR}/data/apps"

          cp -f hedera-node/data/lib/*.jar "${BUILD_BASE_DIR}/data/lib"
          cp -f hedera-node/data/apps/*.jar "${BUILD_BASE_DIR}/data/apps"
          cp -f hedera-node/configuration/update/immediate.sh "${BUILD_BASE_DIR}"
          cp -f hedera-node/configuration/update/during-freeze.sh "${BUILD_BASE_DIR}"

          echo "folder=${BUILD_BASE_DIR}" >>"${GITHUB_OUTPUT}"

      - name: Write Artifact Version Descriptor
        working-directory: ${{ steps.artifact-staging.outputs.folder }}
        run: |
          printf "VERSION=%s\nCOMMIT=%s\nDATE=%s" "${{ needs.validate.outputs.version }}" "${{ needs.validate.outputs.commit-id-short }}" "$(date -u)" | tee VERSION

      - name: Create Artifact Archive
        id: artifact-release
        working-directory: ${{ steps.artifact-staging.outputs.folder }}
        run: |
          POLICY="${{ inputs.version-policy }}"
          ARTIFACT_BASE_DIR="${HOME}/artifact-release"
          mkdir -p "${ARTIFACT_BASE_DIR}"

          if [[ "${POLICY}" == "branch-commit"  ]]; then
            ARTIFACT_NAME="build-${{ needs.validate.outputs.branch-name-safe }}-${{ needs.validate.outputs.commit-id-short }}"
          else
            ARTIFACT_NAME="build-v${{ needs.validate.outputs.version }}"
          fi

          ARTIFACT_FILE="${ARTIFACT_BASE_DIR}/${ARTIFACT_NAME}.zip"
          deterministic-zip -D -vr "${ARTIFACT_FILE}" *

          echo "folder=${ARTIFACT_BASE_DIR}" >>"${GITHUB_OUTPUT}"
          echo "name=${ARTIFACT_NAME}" >>"${GITHUB_OUTPUT}"
          echo "file=${ARTIFACT_FILE}" >>"${GITHUB_OUTPUT}"

      - name: Compute SHA Hash
        working-directory: ${{ steps.artifact-release.outputs.folder }}
        run: |
          ARTIFACT_NAME="${{ steps.artifact-release.outputs.name }}"
          sha384sum "${ARTIFACT_NAME}.zip" | tee "${ARTIFACT_NAME}.sha384"

      - name: Upload Artifacts (DevOps GCP Bucket)
        uses: google-github-actions/upload-cloud-storage@22121cd842b0d185e042e28d969925b538c33d77 # v2.1.0
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          path: ${{ steps.artifact-release.outputs.folder }}
          destination: ${{ secrets.bucket-name }}
          parent: false

      - name: Upload Artifacts (CDN Bucket)
        uses: google-github-actions/upload-cloud-storage@22121cd842b0d185e042e28d969925b538c33d77 # v2.1.0
        if: ${{ inputs.dry-run-enabled != true && needs.validate.outputs.prerelease != 'true' && !cancelled() && !failure() }}
        with:
          path: ${{ steps.artifact-release.outputs.folder }}
          destination: ${{ secrets.cdn-bucket-name }}/node/software/v${{ needs.validate.outputs.version-prefix }}/
          parent: false

      - name: Notify Jenkins of Release (Integration)
        id: jenkins-integration
        uses: fjogeleit/http-request-action@0bd00a33db6f82063a3c6befd41f232f61d66583 # v1.15.2
        if: ${{ inputs.dry-run-enabled != true && inputs.trigger-env-deploy == 'integration' && !cancelled() && !failure() }}
        with:
          url: ${{ secrets.jenkins-integration-url }}
          data: ${{ toJSON(github.event) }}

      - name: Display Jenkins Payload
        env:
          JSON_RESPONSE: ${{ steps.jenkins-integration.outputs.response || steps.jenkins-preview.outputs.response }}
        if: ${{ inputs.trigger-env-deploy == 'integration' }}
        run: |
          jq '.' <<<"${JSON_RESPONSE}"
          printf "### Jenkins Response Payload\n\`\`\`json\n%s\n\`\`\`\n" "$(jq '.' <<<"${JSON_RESPONSE}")" >>"${GITHUB_STEP_SUMMARY}"

      - name: Check for Jenkins Failures (Integration)
        if: ${{ inputs.trigger-env-deploy == 'integration' }}
        env:
          JSON_RESPONSE: ${{ steps.jenkins-integration.outputs.response }}
        run: |
          INTEGRATION_TRIGGERED="$(jq '.jobs."build-upgrade-integration".triggered' <<<"${JSON_RESPONSE}")"
          DOCKER_TRIGGERED="$(jq '.jobs."build-upgrade-integration-docker".triggered' <<<"${JSON_RESPONSE}")"

          if [[ "${INTEGRATION_TRIGGERED}" != true ]]; then
            echo "::error title=Jenkins Trigger Failure::Failed to trigger the 'build-upgrade-integration' job via the Jenkins 'integration' pipeline!"
            exit 1
          fi

          if [[ "${DOCKER_TRIGGERED}" != true ]]; then
            echo "::error title=Jenkins Trigger Failure::Failed to trigger the 'build-upgrade-integration-docker' job via the Jenkins 'integration' pipeline!"
            exit 1
          fi

  local-node-images:
    name: Publish Local Node Images
    runs-on: network-node-linux-large
    needs:
      - validate
      - build-artifact

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c # v2.1.2
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          token_format: 'access_token'
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "swirlds-automation@hedera-registry.iam.gserviceaccount.com"

      - name: Set Image Registry
        id: set-registry
        run: |
         DOCKER_REGISTRY="gcr.io"
         [[ "${{ inputs.version-policy }}" == "branch-commit" ]] && DOCKER_REGISTRY="us-docker.pkg.dev"
         echo "docker-registry=${DOCKER_REGISTRY}" >>"${GITHUB_OUTPUT}"

         DOCKER_TAG_BASE="gcr.io/hedera-registry"
         if [[ "${{ inputs.version-policy }}" == "branch-commit" && "${{ inputs.dry-run-enabled }}" != true ]]; then
            DOCKER_TAG_BASE="us-docker.pkg.dev/swirlds-registry/local-node"
         elif [[ "${{ inputs.dry-run-enabled }}" == true ]]; then
            DOCKER_TAG_BASE="localhost:5000"
         fi

         echo "docker-tag-base=${DOCKER_TAG_BASE}" >>"${GITHUB_OUTPUT}"

      - name: Setup QEmu Support
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      - name: Setup Docker Buildx Support
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1
        with:
          version: v0.16.2
          driver-opts: network=host
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["https://hub.mirror.docker.lat.ope.eng.hashgraph.io"]

      - name: Setup Local Docker Registry
        if: ${{ inputs.dry-run-enabled == true && !cancelled() && !failure() }}
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:latest

      - name: Docker Login
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          registry: ${{ steps.set-registry.outputs.docker-registry }}
          username: oauth2accesstoken
          password: ${{ steps.google-auth.outputs.access_token }}

      - name: Restore Build Artifacts
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # v4.0.1
        with:
          fail-on-cache-miss: true
          path: ~/artifact-build
          key: node-build-artifacts-${{ needs.validate.outputs.version }}-${{ github.sha }}

      - name: Stage SDK Artifacts
        run: |
          mkdir -p hedera-node/infrastructure/docker/containers/local-node/main-network-node/sdk
          cp -rvf ~/artifact-build/* hedera-node/infrastructure/docker/containers/local-node/main-network-node/sdk/

      - name: Build Haveged Image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          context: hedera-node/infrastructure/docker/containers/local-node/network-node-haveged
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/network-node-haveged:${{ needs.validate.outputs.version }}

      - name: Build Base Image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          context: hedera-node/infrastructure/docker/containers/local-node/network-node-base
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/network-node-base:${{ needs.validate.outputs.version }}

      - name: Build Network Node Image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
           IMAGE_TAG=${{ needs.validate.outputs.version }}
           IMAGE_PREFIX=${{ steps.set-registry.outputs.docker-tag-base }}/
          context: hedera-node/infrastructure/docker/containers/local-node/main-network-node
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/main-network-node:${{ needs.validate.outputs.version }}

      - name: Render Job Summary
        run: |
          NETWORK_NODE_BASE_LINK="Not Applicable"
          NETWORK_NODE_HAVEGED_LINK="Not Applicable"
          NETWORK_NODE_MAIN_LINK="Not Applicable"

          if [[ "${{ inputs.dry-run-enabled }}" != true ]]; then
            NETWORK_NODE_BASE_LINK="[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/network-node-base:${{ needs.validate.outputs.version }})"
            NETWORK_NODE_HAVEGED_LINK="[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/network-node-haveged:${{ needs.validate.outputs.version }})"
            NETWORK_NODE_MAIN_LINK="[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/main-network-node:${{ needs.validate.outputs.version }})"
          fi

          printf "### Published Docker Images\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| Image Name | Version | URL | Supported Architectures |\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| ---------- | ------- | --- | ----------------------- |\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/network-node-base" \
            "${{ needs.validate.outputs.version }}" \
            "${NETWORK_NODE_BASE_LINK}" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/network-node-haveged" \
            "${{ needs.validate.outputs.version }}" \
            "${NETWORK_NODE_HAVEGED_LINK}" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/main-network-node" \
            "${{ needs.validate.outputs.version }}" \
            "${NETWORK_NODE_MAIN_LINK}" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "\n\n" >> "${GITHUB_STEP_SUMMARY}"

  gcp-production-image:
    name: Publish Production Image
    uses: ./.github/workflows/zxc-publish-production-image.yaml
    needs:
      - validate
      - build-artifact
    with:
      version: ${{ needs.validate.outputs.version }}
      version-policy: ${{ inputs.version-policy }}
      dry-run-enabled: ${{ inputs.dry-run-enabled }}
      registry-name: gcp
      custom-job-name: "Publish Production Image (GCP)"
    secrets:
      jf-url: ${{ secrets.jf-url }}
      jf-user-name: ${{ secrets.jf-user-name }}
      jf-docker-registry: ${{ secrets.jf-docker-registry }}
      jf-access-token: ${{ secrets.jf-access-token }}

  jfr-production-image:
    name: Publish Production Image
    uses: ./.github/workflows/zxc-publish-production-image.yaml
    needs:
      - validate
      - build-artifact
    with:
      version: ${{ needs.validate.outputs.version }}
      version-policy: ${{ inputs.version-policy }}
      dry-run-enabled: ${{ inputs.dry-run-enabled }}
      registry-name: jfrog
      custom-job-name: "Publish Production Image (JFrog)"
    secrets:
      jf-url: ${{ secrets.jf-url }}
      jf-user-name: ${{ secrets.jf-user-name }}
      jf-docker-registry: ${{ secrets.jf-docker-registry }}
      jf-access-token: ${{ secrets.jf-access-token }}

  validate-production-image:
    name: Validate Production Image
    runs-on: network-node-linux-large
    needs:
      - gcp-production-image
      - jfr-production-image
    if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c # v2.1.2
        with:
          token_format: 'access_token'
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "swirlds-automation@hedera-registry.iam.gserviceaccount.com"

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@d82fe26823e1f25529250895d5673f65b02af085 # v4.0.1
        env:
          JF_URL: ${{ secrets.jf-url }}
          JF_ACCESS_TOKEN: ${{ secrets.jf-access-token }}

      - name: Show JFrog Config
        run: jfrog config show

      - name: Verify JFrog Connectivity
        run: jfrog rt ping

      - name: Docker Login (GCP)
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: ${{ needs.gcp-production-image.outputs.docker-registry }}
          username: oauth2accesstoken
          password: ${{ steps.google-auth.outputs.access_token }}

      - name: Docker Login (JFrog)
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: ${{ needs.jfr-production-image.outputs.docker-registry }}
          username: ${{ secrets.jf-user-name }}
          password: ${{ secrets.jf-access-token }}

      - name: Create Manifest Directories
        run: |
          mkdir -p "${DOCKER_MANIFEST_PATH}/gcp"
          mkdir -p "${DOCKER_MANIFEST_PATH}/jfrog"

      - name: Generate GCP Manifest
        id: gcp
        env:
          MANIFEST_PATH: ${{ env.DOCKER_MANIFEST_PATH }}/gcp
          DOCKER_REGISTRY: ${{ needs.gcp-production-image.outputs.docker-image-prefix }}
          DOCKER_TAG: ${{ needs.gcp-production-image.outputs.docker-image-tag }}
        run: ${{ env.DOCKER_MANIFEST_GENERATOR }}

      - name: Generate JFrog Manifest
        id: jfrog
        env:
          MANIFEST_PATH: ${{ env.DOCKER_MANIFEST_PATH }}/jfrog
          DOCKER_REGISTRY: ${{ needs.jfr-production-image.outputs.docker-image-prefix }}
          DOCKER_TAG: ${{ needs.jfr-production-image.outputs.docker-image-tag }}
        run: ${{ env.DOCKER_MANIFEST_GENERATOR }}

      - name: Validate Layers (linux/amd64)
        run: |
          if ! diff -u "${{ steps.gcp.outputs.path }}/linux-amd64.layers.json" "${{ steps.jfrog.outputs.path }}/linux-amd64.layers.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${{ steps.gcp.outputs.path }}/linux-amd64.layers.json" "${{ steps.jfrog.outputs.path }}/linux-amd64.layers.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Validate Layers (linux/arm64)
        run: |
          if ! diff -u "${{ steps.gcp.outputs.path }}/linux-arm64.layers.json" "${{ steps.jfrog.outputs.path }}/linux-arm64.layers.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${{ steps.gcp.outputs.path }}/linux-arm64.layers.json" "${{ steps.jfrog.outputs.path }}/linux-arm64.layers.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Validate Full Manifest (linux/amd64)
        run: |
          if ! diff -u "${{ steps.gcp.outputs.path }}/linux-amd64.comparable.json" "${{ steps.jfrog.outputs.path }}/linux-amd64.comparable.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${{ steps.gcp.outputs.path }}/linux-amd64.comparable.json" "${{ steps.jfrog.outputs.path }}/linux-amd64.comparable.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Validate Full Manifest (linux/arm64)
        run: |
          if ! diff -u "${{ steps.gcp.outputs.path }}/linux-arm64.comparable.json" "${{ steps.jfrog.outputs.path }}/linux-arm64.comparable.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${{ steps.gcp.outputs.path }}/linux-arm64.comparable.json" "${{ steps.jfrog.outputs.path }}/linux-arm64.comparable.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Upload Manifests
        uses: actions/upload-artifact@604373da6381bf24206979c74d06a550515601b9 # v4.4.1
        if: ${{ (steps.gcp.outcome == 'success' || steps.jfrog.outcome == 'success') && !cancelled() && always() }}
        with:
          name: Production Image Manifests
          path: ${{ env.DOCKER_MANIFEST_PATH }}

  publish:
    name: Publish to ${{ inputs.version-policy == 'specified' && 'Maven Central' || 'GCP Registry' }}
    runs-on: network-node-linux-large
    needs:
      - validate
    if: ${{ inputs.release-profile != 'none' }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install GnuPG Tools
        if: ${{ inputs.dry-run-enabled != true }}
        run: |
          if ! command -v gpg2 >/dev/null 2>&1; then
            echo "::group::Updating APT Repository Indices"
              sudo apt update
            echo "::endgroup::"
            echo "::group::Installing GnuPG Tools"
              sudo apt install -y gnupg2
            echo "::endgroup::"
          fi

      - name: Import GPG key
        id: gpg_key
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
        with:
          gpg_private_key: ${{ secrets.sdk-gpg-key-contents }}
          passphrase: ${{ secrets.sdk-gpg-key-passphrase }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c # v2.1.2
        with:
          workload_identity_provider: "projects/229164983194/locations/global/workloadIdentityPools/registry-identity-pool/providers/gh-provider"
          service_account: "artifact-deployer@swirlds-registry.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@98ddc00a17442e89a24bbf282954a3b65ce6d200 # v2.1.0
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}

      - name: Setup Java
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        with:
          gradle-version: ${{ inputs.gradle-version }}

      - name: Restore Build Version
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # v4.0.1
        with:
          fail-on-cache-miss: true
          path: version.txt
          key: node-build-version-${{ needs.validate.outputs.version }}-${{ github.sha }}

      - name: Gradle Assemble
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: assemble --scan

      - name: Gradle Version Summary
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: githubVersionSummary --scan

      - name: Stage SDK Release Archives
        working-directory: platform-sdk
        run: |
          SDK_RELEASE_DIR="${HOME}/sdk-release"
          SDK_ARCHIVE_DIR="${HOME}/sdk-archives"
          COMMIT_SHA="${{ needs.validate.outputs.commit-id-short }}"

          #if [[ "${{ steps.archive-cache.outputs.cache-hit }}" == true ]]; then
          #  echo "::group::Removing Existing Archive Cache Items"
          #  rm -rvf "${SDK_ARCHIVE_DIR}"/*
          #  echo "::endgroup::"
          #fi

          echo "::group::Creating Release Directories"
            [[ -f "${SDK_RELEASE_DIR}" ]] || mkdir -p "${SDK_RELEASE_DIR}"
            [[ -f "${SDK_ARCHIVE_DIR}" ]] || mkdir -p "${SDK_ARCHIVE_DIR}"
          echo "::endgroup::"

          echo "::group::Staging Release Files"
            cp -Rvf sdk/* "${SDK_RELEASE_DIR}"
            rm -vf "${SDK_RELEASE_DIR}/log4j2.xml"
            rm -vf "${SDK_RELEASE_DIR}/settings.txt"
            rm -vf "${SDK_RELEASE_DIR}/test_cases.sh"
            rm -rvf "${SDK_RELEASE_DIR}/target"
            rm -rvf "${SDK_RELEASE_DIR}/testing"
            rm -rvf "${SDK_RELEASE_DIR}/kernels"
            rm -rvf "${SDK_RELEASE_DIR}/data/configs"


            cat "sdk/config.txt" | \
              perl -0777 -pe 's/# \*\* BEGIN REMOVE FROM SDK RELEASES \*\*.*# \*\* END REMOVE FROM SDK RELEASES \*\*//igs' \
                > "${SDK_RELEASE_DIR}/config.txt"
          echo "::endgroup::"

          echo "::group::Rendering Settings File"
            SETTINGS_CONTENTS="loadKeysFromPfxFiles, false\n"
            SETTINGS_CONTENTS+="requireStateLoad, false\n"
            SETTINGS_CONTENTS+="csvOutputFolder, data/stats\n"
            SETTINGS_CONTENTS+="csvFileName, DemoStats\n"

            echo -e "${SETTINGS_CONTENTS}" >"${SDK_RELEASE_DIR}/settings.txt"
          echo "::endgroup::"

          LIB_ARCHIVE_FILE="${SDK_ARCHIVE_DIR}/platform-sdk-libs-v${{ needs.validate.outputs.version }}-${COMMIT_SHA}.zip"
          APPS_ARCHIVE_FILE="${SDK_ARCHIVE_DIR}/platform-sdk-apps-v${{ needs.validate.outputs.version }}-${COMMIT_SHA}.zip"
          PUBLIC_ARCHIVE_FILE="${SDK_ARCHIVE_DIR}/platform-sdk-public-v${{ needs.validate.outputs.version }}-${COMMIT_SHA}.zip"

          echo "::group::Building Release Archives"
            cd "${SDK_RELEASE_DIR}" || exit "${?}"
            zip -r "${LIB_ARCHIVE_FILE}" data/lib
            zip -r "${APPS_ARCHIVE_FILE}" data/apps

            # remove testing tools (if present) before building the public release artifact
            rm -vf data/apps/*TestingTool.jar || true
            zip -r "${PUBLIC_ARCHIVE_FILE}" *
          echo "::endgroup::"

          echo "::group::Sign Release Archives"
            cd "${SDK_ARCHIVE_DIR}" || exit "${?}"
            sha256sum "${LIB_ARCHIVE_FILE}" >"${LIB_ARCHIVE_FILE}.sha256"
            sha256sum "${APPS_ARCHIVE_FILE}" >"${APPS_ARCHIVE_FILE}.sha256"
            sha256sum "${PUBLIC_ARCHIVE_FILE}" >"${PUBLIC_ARCHIVE_FILE}.sha256"

            gpg --output "${LIB_ARCHIVE_FILE}.asc" --detach-sig "${LIB_ARCHIVE_FILE}"
            gpg --output "${APPS_ARCHIVE_FILE}.asc" --detach-sig "${APPS_ARCHIVE_FILE}"
            gpg --output "${PUBLIC_ARCHIVE_FILE}.asc" --detach-sig "${PUBLIC_ARCHIVE_FILE}"

            gpg --output "${LIB_ARCHIVE_FILE}.sha256.asc" --detach-sig "${LIB_ARCHIVE_FILE}.sha256"
            gpg --output "${APPS_ARCHIVE_FILE}.sha256.asc" --detach-sig "${APPS_ARCHIVE_FILE}.sha256"
            gpg --output "${PUBLIC_ARCHIVE_FILE}.sha256.asc" --detach-sig "${PUBLIC_ARCHIVE_FILE}.sha256"
          echo "::endgroup::"

      - name: Gradle Publish Platform to ${{ inputs.version-policy == 'specified' && 'Maven Central' || 'Google Artifact Registry' }} (${{ inputs.release-profile }})
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        if: ${{ inputs.dry-run-enabled != true && inputs.release-profile != 'none' && !cancelled() && !failure() }}
        env:
          NEXUS_USERNAME: ${{ secrets.sdk-ossrh-username }}
          NEXUS_PASSWORD: ${{ secrets.sdk-ossrh-password }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: "release${{ inputs.release-profile }} -PpublishingPackageGroup=com.swirlds --scan -PpublishSigningEnabled=true --no-configuration-cache"

      - name: Gradle Publish Services to ${{ inputs.version-policy == 'specified' && 'Maven Central' || 'Google Artifact Registry' }} (${{ inputs.release-profile }})
        uses: gradle/gradle-build-action@29c0906b64b8fc82467890bfb7a0a7ef34bda89e # v3.1.0
        if: ${{ inputs.dry-run-enabled != true && inputs.release-profile != 'none' && !cancelled() && !failure() }}
        env:
          NEXUS_USERNAME: ${{ secrets.svcs-ossrh-username }}
          NEXUS_PASSWORD: ${{ secrets.svcs-ossrh-password }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: "release${{ inputs.release-profile }} -PpublishingPackageGroup=com.hedera --scan -PpublishSigningEnabled=true --no-configuration-cache"

      - name: Upload SDK Release Archives
        if: ${{ inputs.dry-run-enabled != true && inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        env:
          RELEASE_TAG: v${{ needs.validate.outputs.version }}
        run: |
          SDK_ARCHIVE_DIR="${HOME}/sdk-archives"
          gsutil -m cp -r "${SDK_ARCHIVE_DIR}"/* gs://platform-sdk-ci-release-artifacts/${RELEASE_TAG}/

  send-notifications:
    name: Send Release Notifications
    runs-on: network-node-linux-large
    needs:
      - validate
      - local-node-images
      - validate-production-image
      - publish
    if: ${{ inputs.dry-run-enabled != true && inputs.version-policy == 'specified' && !cancelled() && !failure() }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10 # v2.8.0
        with:
          egress-policy: audit

      - name: Determine Notification Parameters
        id: parameters
        run: |
          ARTIFACT_URL="https://repo1.maven.org/maven2/com/swirlds/swirlds-platform-core/${{ needs.validate.outputs.version }}/"
          ARTIFACT_LINK_NAME="MC Availability Check"
          ARTIFACT_REGISTRY="Maven Central"

          if [[ "${{ inputs.release-profile }}" == "PrereleaseChannel" ]]; then
            ARTIFACT_URL="https://console.cloud.google.com/artifacts/maven/swirlds-registry/us/maven-prerelease-channel/com.swirlds:swirlds-platform-core/${{ needs.validate.outputs.version }}?project=swirlds-registry"
            ARTIFACT_LINK_NAME="GCP Registry"
            ARTIFACT_REGISTRY="GCP Artifact Registry"
          fi

          echo "artifact-url=${ARTIFACT_URL}" >>"${GITHUB_OUTPUT}"
          echo "artifact-name=${ARTIFACT_LINK_NAME}" >>"${GITHUB_OUTPUT}"
          echo "artifact-registry=${ARTIFACT_REGISTRY}" >>"${GITHUB_OUTPUT}"

      - name: Send Slack Notification (Maven Central)
        uses: slackapi/slack-github-action@6c661ce58804a1a20f6dc5fbee7f0381b469e001 # v1.25.0
        env:
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          SLACK_WEBHOOK_URL: ${{ secrets.slack-webhook-url }}
        with:
          payload: |
            {
              "attachments": [
                  {
                    "color": "#b7f350",
                    "blocks": [
                      {
                        "type": "header",
                        "text": {
                          "type": "plain_text",
                          "text": ":dvd: Node Software Release v${{ needs.validate.outputs.version }}",
                          "emoji": true
                        }
                      },
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Deployment Channel:*"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Deployment Status Check:*"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "${{ steps.parameters.outputs.artifact-registry }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "<${{ steps.parameters.outputs.artifact-url }}|${{ steps.parameters.outputs.artifact-name }}>"
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Source Branch:*"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Short Commit ID:*"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "<${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "`${{ needs.validate.outputs.commit-id-short }}`"
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Gradle Version Number:*"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Release Notes:*"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "`${{ needs.validate.outputs.version }}`"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "<${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}|v${{ needs.validate.outputs.version }}>"
                          }
                        ]
                      },
                      {
                        "type": "divider"
                      },
                      {
                        "type": "context",
                        "elements": [
                          {
                            "type": "mrkdwn",
                            "text": ":warning: Artifacts may not be immediately available in Maven Central. Please verify existence of the artifacts using the link provided above."
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
