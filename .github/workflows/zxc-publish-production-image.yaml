##
# Copyright (C) 2024 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "ZXC: Publish Production Image"
on:
  workflow_call:
    inputs:
      version:
        description: "Version:"
        type: string
        required: true
      # Valid version policies are as follows: specified, branch-commit, adhoc-commit
      version-policy:
        description: "Version Policy:"
        type: string
        required: true
      # Valid registry names are as follows: gcp, jfrog
      registry-name:
        description: "Registry Name (gcp or jfrog):"
        type: string
        required: true
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false
      custom-job-name:
        description: "Custom Job Name:"
        required: false
        type: string
        default: "Publish Production Image (GCP)"
    outputs:
      docker-registry:
        description: "Docker Registry"
        value: ${{ jobs.publish-image.outputs.docker-registry }}
      docker-image:
        description: "Docker Image"
        value: ${{ jobs.publish-image.outputs.docker-image }}
      docker-image-prefix:
        description: "Docker Image Prefix"
        value: ${{ jobs.publish-image.outputs.docker-image-prefix }}
      docker-image-tag:
        description: "Docker Image Tag"
        value: ${{ jobs.publish-image.outputs.docker-image-tag }}
    secrets:
      jf-url:
        required: true
      jf-user-name:
        required: true
      jf-docker-registry:
        required: true
      jf-access-token:
        required: true

defaults:
  run:
    shell: bash

env:
  LC_ALL: C.UTF-8

permissions:
  id-token: write
  contents: read

jobs:
  publish-image:
    name: ${{ inputs.custom-job-name || 'Publish Production Image (GCP)' }}
    runs-on: network-node-linux-large
    outputs:
      docker-registry: ${{ steps.set-registry.outputs.docker-registry }}
      docker-image: ${{ steps.set-registry.outputs.docker-tag-base }}/consensus-node:${{ inputs.version }}
      docker-image-prefix: ${{ steps.set-registry.outputs.docker-tag-base }}
      docker-image-tag: ${{ inputs.version }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Restore Build Artifacts
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          fail-on-cache-miss: true
          path: ~/artifact-build
          key: node-build-artifacts-${{ inputs.version }}-${{ github.sha }}

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f # v2.1.7
        if: ${{ inputs.dry-run-enabled != true && inputs.registry-name == 'gcp' && !cancelled() && !failure() }}
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "swirlds-automation@hedera-registry.iam.gserviceaccount.com"

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@18e785fb220d332edbf01964f853ff0fcaa22220 # v4.4.2
        if: ${{ inputs.dry-run-enabled != true && inputs.registry-name == 'jfrog' && !cancelled() && !failure() }}
        env:
          JF_URL: ${{ secrets.jf-url }}
          JF_ACCESS_TOKEN: ${{ secrets.jf-access-token }}

      - name: Show JFrog Config
        if: ${{ inputs.dry-run-enabled != true && inputs.registry-name == 'jfrog' && !cancelled() && !failure() }}
        run: jfrog config show

      - name: Verify JFrog Connectivity
        if: ${{ inputs.dry-run-enabled != true && inputs.registry-name == 'jfrog' && !cancelled() && !failure() }}
        run: jfrog rt ping

      - name: Commit Information
        id: commit
        run: |
          echo "source-date=$(git log -1 --pretty=%ct)" >> "${GITHUB_OUTPUT}"

      - name: Set Image Registry
        id: set-registry
        run: |
          DOCKER_REGISTRY="gcr.io"
          [[ "${{ inputs.version-policy }}" == "branch-commit" && "${{ inputs.registry-name }}" == "gcp" ]] && DOCKER_REGISTRY="us-docker.pkg.dev"
          [[ "${{ inputs.registry-name }}" == "jfrog" ]] && DOCKER_REGISTRY="artifacts.swirldslabs.io"
          echo "docker-registry=${DOCKER_REGISTRY}" >>"${GITHUB_OUTPUT}"

          DOCKER_TAG_BASE="gcr.io/hedera-registry"
          [[ "${{ inputs.registry-name }}" == "jfrog" ]] && DOCKER_TAG_BASE="artifacts.swirldslabs.io/consensus-node-docker-release"

          if [[ "${{ inputs.version-policy }}" == "branch-commit" && "${{ inputs.dry-run-enabled }}" != true ]]; then
             [[ "${{ inputs.registry-name }}" == "gcp" ]] && DOCKER_TAG_BASE="us-docker.pkg.dev/swirlds-registry/docker-adhoc-commits"
             [[ "${{ inputs.registry-name }}" == "jfrog" ]] && DOCKER_TAG_BASE="artifacts.swirldslabs.io/consensus-node-docker-dev"
          elif [[ "${{ inputs.dry-run-enabled }}" == true ]]; then
             DOCKER_TAG_BASE="localhost:5000"
          fi

          echo "docker-tag-base=${DOCKER_TAG_BASE}" >>"${GITHUB_OUTPUT}"

      - name: Setup QEmu Support
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0

      - name: Setup Docker Buildx Support
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1
        with:
          version: v0.16.2
          driver-opts: network=host
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["https://hub.mirror.docker.lat.ope.eng.hashgraph.io"]

      - name: Setup Local Docker Registry
        if: ${{ inputs.dry-run-enabled == true && !cancelled() && !failure() }}
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:latest

      - name: Docker Login (GCP)
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        if: ${{ inputs.dry-run-enabled != true && inputs.registry-name == 'gcp' && !cancelled() && !failure() }}
        with:
          registry: ${{ steps.set-registry.outputs.docker-registry }}
          username: oauth2accesstoken
          password: ${{ steps.google-auth.outputs.access_token }}

      - name: Docker Login (JFrog)
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        if: ${{ inputs.dry-run-enabled != true && inputs.registry-name == 'jfrog' && !cancelled() && !failure() }}
        with:
          registry: ${{ steps.set-registry.outputs.docker-registry }}
          username: ${{ secrets.jf-user-name }}
          password: ${{ secrets.jf-access-token }}

      - name: Stage SDK Artifacts
        run: |
          mkdir -p hedera-node/infrastructure/docker/containers/production-next/consensus-node/sdk
          cp -rvf ~/artifact-build/* hedera-node/infrastructure/docker/containers/production-next/consensus-node/sdk/

      - name: Build Consensus Node Image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        env:
          SOURCE_DATE_EPOCH: ${{ steps.commit.outputs.source-date }}
        with:
          push: true
          no-cache: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            SOURCE_DATE_EPOCH=${{ steps.commit.outputs.source-date }}
          context: hedera-node/infrastructure/docker/containers/production-next/consensus-node
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/consensus-node:${{ inputs.version }}

      - name: Render Job Summary
        run: |
          CONSENSUS_NODE_LINK="Not Applicable"

          if [[ "${{ inputs.dry-run-enabled }}" != true ]]; then
             CONSENSUS_NODE_LINK="[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/consensus-node:${{ inputs.version }})"
             if [[ "${{ inputs.registry-name }}" == "jfrog" ]]; then
                if [[ "${{ inputs.version-policy }}" == "branch-commit" ]]; then
                   CONSENSUS_NODE_LINK="[Artifactory](https://artifacts.swirldslabs.io/ui/native/consensus-node-docker-dev)"
                else
                   CONSENSUS_NODE_LINK="[Artifactory](https://artifacts.swirldslabs.io/ui/native/consensus-node-docker-release)"
                fi
            fi
          fi

          printf "### Published Docker Images\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| Image Name | Version | URL | Supported Architectures |\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| ---------- | ------- | --- | ----------------------- |\n" >> "${GITHUB_STEP_SUMMARY}"

          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/consensus-node" \
            "${{ inputs.version }}" \
            "${CONSENSUS_NODE_LINK}" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "\n\n" >> "${GITHUB_STEP_SUMMARY}"
