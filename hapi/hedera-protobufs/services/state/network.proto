/**
 * # Network information
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.node.state;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.hapi.node.state.legacy";
// <<<pbj.java_package = "com.hedera.hapi.node.state">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "auxiliary/tss/tss_message.proto";
import "state/addressbook/node.proto";
import "state/roster/roster.proto";
import "basic_types.proto";

/**
 * The full information needed to bootstrap a network with TSS enabled
 * and the legacy address book completely replaced by rosters.
 */
message Network {
  /**
   * The metadata of the nodes in the network.
   */
  repeated NodeMetadata node_metadata = 1;

  /**
   * If set, a list of TSS messages that have been generated by the nodes in
   * a target network that is receiving a "transplant state". This lets us
   * preserve the ledger id of the target network even if the transplant
   * state has no keys (or even roster entries) in common with the target.
   * This must be exactly the ordered list of TSS messages used to generate
   * the target network's ledger id; and must generate the same ledger id
   * given below.
   */
  repeated com.hedera.hapi.services.auxiliary.tss.TssMessageTransactionBody tss_messages = 2;

  /**
   * If set, the expected ledger id of the network.
   */
  bytes ledger_id = 3;
}

/**
 * The full information needed for a node.
 */
message NodeMetadata {
  /**
   * The node's entry in the current roster at the time of the network snapshot;
   * required to validate the network's ledger id if set.
   */
  com.hedera.hapi.node.state.roster.RosterEntry roster_entry = 1;

  /**
   * The latest metadata of the node in the full address book.
   */
  com.hedera.hapi.node.state.addressbook.Node node = 2;

  /**
   * If set, the public part of a prescribed TSS encryption key for the node.
   */
  bytes tss_encryption_key = 3;
}
