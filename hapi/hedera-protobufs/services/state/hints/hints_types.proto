syntax = "proto3";

package com.hedera.hapi.node.state.hints;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "timestamp.proto";
import "basic_types.proto";

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.state.hints">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * The id of a party in a hinTS scheme; at most one scheme of
 * a given size is active at any time, so it suffices to specify
 * the party id and the number of parties in the scheme.
 */
message HintsPartyId {
  /**
   * The party id in the range [0, M) for a hinTS scheme of size M.
   */
  uint64 party_id = 1;
  /**
   * The number of parties in the hinTS scheme.
   */
  uint32 num_parties = 2;
}

/**
 * A party's public key and hint for use in construction of a hinTS
  * aggregation key and verification key. A hints key is determined
  * by three inputs: The party id, the number of parties in the
  * scheme, and and the party's BLS secret key.
 */
message HintsKey {
  /**
   * The party's BLS public key.
   */
  bytes public_key = 1;
  /**
   * Hints of the party's contribution to a secret statement.
   */
  bytes hint = 2;
}

/**
 * A set of hinTS keys for a hinTS party, including the node assigned
 * this party id; the key the node is currently using; and the key the
 * node wishes to use in the future.
 */
message HintsKeySet {
  /**
   * The id of the node using this hinTS key.
   */
  uint64 node_id = 1;
  /**
   * The consensus time at which the network adopted the current
   * hinTS key in this set as the above node's hinTS key. (An adoption
   * time that is sufficiently tardy relative to the latest preprocessing
   * start time may result in the party being given zero weight in that
   * construction's aggregation key.)
   */
  proto.Timestamp adoption_time = 2;
  /**
   * The party's active hinTS key.
   */
  HintsKey key = 3;
  /**
   * If not null, the hinTS key the node wants to use in hinTS
   * constructions starting from the next roster handoff. (The node
   * must continue contributing partial signatures with the BLS key
   * corresponding to the above key until such a handoff occurs.)
   */
  HintsKey next_key = 4;
}

/**
 * The output of the hinTS preprocessing algorithm; that is, a
 * linear-size aggregation key and a succinct verification key.
 */
message PreprocessedKeys {
  /**
   * The aggregation key for the hinTS scheme
   */
  bytes aggregation_key = 1;
  /**
   * The succinct verification key for the hinTS scheme.
   */
  bytes verification_key = 2;
}

/**
 * The unique identifier for a node's vote in the preprocessing stage
 * of hinTS construction.
 */
message PreprocessingVoteId {
  /**
   * The unique identifier for the hinTS construction that this vote
   * is associated with.
   */
  uint64 construction_id = 1;
  /**
   * The id of the node that submitted the vote.
   */
  uint64 node_id = 2;
}

/**
 * A node's vote for a particular output of hinTS preprocessing for a
 * construction; either by explicitly giving the preprocessed keys, or
 * by pointing to a node that already voted for those exact keys.
 */
message PreprocessingVote {
  oneof vote {
    /**
     * The preprocessed keys computed by this node.
     */
    PreprocessedKeys preprocessed_keys = 1;
    /**
     * The id of any node that already voted for the exact keys
     * that this node is voting for.
     */
    uint64 congruent_node_id = 2;
  }
}

/**
 * Captures a node's hinTS party id.
 */
message NodePartyId {
  /**
   * The node id.
   */
  uint64 node_id = 1;
  /**
   * The party id.
   */
  uint32 party_id = 2;
}

/**
 * A summary of progress on constructing a hinTS scheme, including a
 * unique id, the time at which construction started, the hashes of the
 * rosters used to determine when weight inequalities are satisfied,
 * and the preprocessed keys that were approved by nodes holding at
 * least 1/3 of the weight in the source roster.
 */
message HintsConstruction {
  /**
   * The unique identifier for this hinTS construction; used to
   * correlate secondary state like votes with the construction.
   */
  uint64 construction_id = 1;
  /**
   * The hash of the roster whose weights are used to determine when
   * >=1/3 weight signing thresholds are reached.
   */
  bytes source_roster_hash = 2;
  /**
   * The hash of the roster whose weights are used to determine when
   * >2/3 weight signing thresholds are reached.
   */
  bytes target_roster_hash = 3;

  oneof preprocessing_time {
    /**
     * If the network is still gathering hinTS keys for this construction,
     * the next time at which honest nodes should apply the consensus policy
     * to decide whether to begin the preprocessing stage.
     */
    proto.Timestamp preprocessing_checkpoint_time = 4;
    /**
     * If the network has gathered enough hinTS keys for this construction
     * to begin preprocessing, the cutoff time at those keys must have been
     * adopted by to be included in the final preprocessed keys.
     */
    proto.Timestamp preprocessing_start_time = 5;
  }

  /**
   * If set, the preprocessed hinTS keys that were approved by nodes
   * holding at least 1/3 of the weight in the source roster.
   */
  PreprocessedKeys preprocessed_keys = 6;

  /**
   * The party ids assigned the nodes.
   */
  repeated NodePartyId node_party_ids = 7;
}