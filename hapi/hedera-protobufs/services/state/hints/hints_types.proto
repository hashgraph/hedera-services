syntax = "proto3";

package com.hedera.hapi.node.state.hints;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "timestamp.proto";
import "basic_types.proto";

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.state.hints">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * The unique identifier for a node in a hinTS scheme with a
 * certain maximum size M = 2^k; maps to the node's party id
 * in the range [0, M).
 */
message NodeSchemeId {
  /**
   * The node id.
   */
  uint64 node_id = 1;
  /**
   * The base-2 logarithm of the maximum number of parties.
   */
  uint32 max_size_log_2 = 2;
}

/**
 * The unique identifier for a party in a hinTS scheme with a
 * certain maximum size M = 2^k. As nodes join and depart the
 * the network, the node mapped to the party id may change, but
 * if there is a valid hint for the party id, it will be used
 * for constructions done when network size N is in the range
 * [2^(k-1), M).
 */
message HintsId {
  /**
   * The unique identifier for a party in a hinTS scheme with a
   * certain maximum size M = 2^k; so that party ids are in the
   * range [0, M).
   */
  uint64 party_id = 1;
  /**
   * The base-2 logarithm of the maximum number of parties.
   */
  uint32 max_size_log_2 = 2;
}

/**
 * A party's public key and hint for use in construction of a hinTS
  * aggregation key and verification key. A hints key is determined
  * by three inputs: The  maximum number M of parties in the scheme,
  * the party's hinTS id in the range [0, M); and the party's BLS
  * secret key.
 */
message HintsKey {
  /**
   * The party's BLS public key.
   */
  bytes public_key = 1;
  /**
   * Hints of the party's contribution to a secret statement.
   */
  bytes hint = 2;
}

/**
 * A set of hints keys for a party, including the node that had this
 * party id at the time of publication, the key party is currently
 * using and the key the party wishes to use in the future.
 */
message HintsKeySet {
  /**
   * The id of the node had this party id at the time of publication.
   */
  uint64 node_id = 1;
  /**
   * The consensus time at which the network adopted the current
   * hints key in this set. An adoption time that is sufficiently
   * tardy relative to the latest preprocessing start time may result
   * in the party being given zero weight in that construction's
   * aggregation key.
   */
  proto.Timestamp adoption_time = 2;
  /**
   * The hints key a party is using.
   */
  HintsKey key = 3;
  /**
   * If not null, the hints key a party wishes to use in all future
   * hinTS constructions. Will be adopted at the beginning of the
   * next stake period after submission; but note that until the
   * preprocessed keys for the _current roster_ derive from the
   * hints in this key, the party must continue signing with their
   * current secret key if they want to contribute to signing.
   */
  HintsKey next_key = 4;
}

/**
 * The preprocessed keys for a number of at most M parties in a hinTS
 * scheme; some or even most of the parties may have a zeroed public
 * key due to missing or invalid hints, but the weights of the parties
 * with valid hints will exceed 1/3 the stake held by the roster from
 * which candidate parties were mapped. (Ideally, the weights will equal
 * the sum of the stake held by the entire roster, in the case that all
 * nodes in the roster were active and honest for hinTS preprocessing.)
 */
message PreprocessedKeys {
  /**
   * The aggregation key for the parties in the scheme; specifies the
   * set of parties with missing or invalid hints.
   */
  bytes aggregation_key = 1;
  /**
   * The succinct verification key for the parties in the scheme.
   */
  bytes verification_key = 2;
}

/**
 * The unique identifier for a vote in the preprocessing stage of
 * hinTS construction.
 */
message PreprocessVoteId {
  /**
   * The unique identifier for the hinTS construction that this vote
   * is associated with.
   */
  uint64 construction_id = 1;
  /**
   * The id of the node that submitted the vote.
   */
  uint64 node_id = 2;
}

/**
 * A node's vote for a particular output of hinTS preprocessing in a
 * certain construction; either by explicitly giving the preprocessed
 * keys, or by identifying a node that already voted for those exact
 * keys.
 */
message PreprocessedKeysVote {
  oneof vote {
    /**
     * The preprocessed keys aggregated by this node.
     */
    PreprocessedKeys preprocessed_keys = 1;
    /**
     * The id of any node that already voted for the exact keys
     * that this node is voting for.
     */
    uint64 congruent_node_id = 2;
  }
}

/**
 * A summary of progress on a hinTS construction, including a unique
 * id, the time at which construction started, the hashes of the
 * rosters used to determine when certain thresholds are met, and the
 * preprocessed keys that were approved by nodes holding strictly more
 * than 1/3 of the weight in the source roster.
 */
message HintsConstruction {
  /**
   * The unique identifier for this hinTS construction; useful for
   * purging associated votes when the construction is completed or
   * cancelled.
   */
  uint64 construction_id = 1;
  /**
   * The hash of the roster whose weights are used to determine when
   * certain thresholds are during construction.
   */
  bytes source_roster_hash = 2;
  /**
   * The hash of the roster whose weights are used to assess progress
   * toward achieving hints for parties that hold at least a strong
   * minority of the stake in that roster.
   */
  bytes target_roster_hash = 3;
  /**
   * If relevant, the next time at which nodes should evaluate the
   * published hints keys for sufficient valid weight to begin
   * aggregation into the final preprocessed keys.
   */
  proto.Timestamp next_aggregation_checkpoint = 4;
  /**
   * If relevant, the next time at which nodes should evaluate the
   * published hints keys for sufficient valid weight to begin
   * aggregation into the final preprocessed keys.
   */
  proto.Timestamp aggregation_time = 5;
  /**
   * If set, the preprocessed hinTS keys that were approved by nodes
   * holding strictly more than 1/3 of the weight in the source roster.
   */
  PreprocessedKeys preprocessed_keys = 6;
}