/**
 * # Network
 * A representation that includes all “biographical information” on each
 * node that is needed by a network with TSS fully operational.
 * Required in order to replace the address book with Rosters.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */

syntax = "proto3";

package com.hedera.hapi.node.state.network;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "auxiliary/tss/tss_message.proto";
import "state/addressbook/node.proto";

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.state.network">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;



/**
  * A description of the Network of Consensus Nodes.<br/>
  * This records the full information needed to bootstrap a network with TSS
  * enabled and where the legacy address book is completely replaced by rosters.
  *
  * ### Block Stream Effects
  * Every block in the Block Stream SHALL be signed via TSS and MUST be verified
  * with the ledger identifier current at the _start_ of that block.
  * A change to the ledger identifier SHALL be reported in a State Change for
  * the block containing that change.
  * A TssMessage transaction body will be present in the block stream.
  * Including the metadata in the block stream guarantees that the ledger
  * identifiers, and node-specific keys are consistently tracked and
  * independently verifiable as part of the block history.
 */
message Network {
  /**
   * The metadata of the nodes in the network.
   */
  repeated NodeMetadata node_metadata = 1;

  /**
   * A list of TSS messages that have been generated by the nodes in
   * a target network that is receiving a "transplant state". <br/>
   * This gives the capability to preserve the ledger id of the target network
   * even if the transplant state has no keys or roster entries in common with
   * the target.
   * <p>
   * This MUST be exactly the ordered list of TSS messages used to generate
   * the target network's ledger id; and must generate the same ledger id
   * given below.
   */
  repeated com.hedera.hapi.services.auxiliary.tss.TssMessageTransactionBody tss_messages = 2;

  /**
   * The ledger id of the network.<br/>
   * This is the public key that identifies the ledger and can be used by the
   * network to create a Block Proof or ledger signature on a block root hash.
   */
  bytes ledger_id = 3;
}

/**
 * The full information needed for a single node in the network state.
 */
message NodeMetadata {
  /**
   * A consensus node identifier.
   * <p>
   * Node identifiers SHALL be unique _within_ a ledger, and may not be repeated
   * _between_ shards and realms.<br/>
   * This value MUST be set.<br/>
   * This value MUST be a valid single address book node in network state.
   */
  uint64 node_id = 1;

  /**
    * An elliptic curve public encryption key.<br/>
    * If set, the public part of a prescribed TSS encryption key for the node.
    * This is currently an ALT_BN128 curve, but the elliptic curve
    * type may change in the future. For example,
    * if the Ethereum ecosystem creates precompiles for BLS12_381,
    * we may switch to that curve.
    * <p>
    * This value SHALL be specified according to EIP-196 and EIP-197 standards,
    * See <a href='https://eips.ethereum.org/EIPS/eip-196#encoding'>EIP-196</a> and
    * <a href='https://eips.ethereum.org/EIPS/eip-197#encoding'>EIP-197</a><br/>
    * This field is _initially_ OPTIONAL (i.e. it can be unset _when created_)
    * but once set, it is REQUIRED thereafter.
    */
  bytes tss_encryption_key = 2;
}
