syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2022 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.contract">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "basic_types.proto";

message EthereumTransactionBody {

  /**
   * The raw Ethereum transaction (RLP encoded type 0, 1, and 2). Complete 
   * unless the callData field is set.
   */
  bytes ethereum_data = 1;

  /**
   * For large transactions (for example contract create) this is the callData
   * of the ethereumData. The data in the ethereumData will be re-written with 
   * the callData element as a zero length string with the original contents in 
   * the referenced file at time of execution. The ethereumData will need to be 
   * "rehydrated" with the callData for signature validation to pass.
   */
  FileID call_data = 2;

  /**
   * The maximum amount, in tinybars, that the payer of the hedera transaction 
   * is willing to pay to complete the transaction.
   *
   * Ordinarily the account with the ECDSA alias corresponding to the public 
   * key that is extracted from the ethereum_data signature is responsible for
   * fees that result from the execution of the transaction. If that amount of
   * authorized fees is not sufficient then the payer of the transaction can be
   * charged, up to but not exceeding this amount. If the ethereum_data 
   * transaction authorized an amount that was insufficient then the payer will
   * only be charged the amount needed to make up the difference. If the gas 
   * price in the transaction was set to zero then the payer will be assessed 
   * the entire fee.
   */
  int64 max_gas_allowance = 3;
}