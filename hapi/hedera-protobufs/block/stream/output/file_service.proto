/**
 * # File Service
 * Block stream messages that report the results of transactions handled
 * by the `File` service.
 *
 * A `file` in Hedera is an arbitrary sequence of bytes and may be up to
 * `1048576` total bytes. Files are used anywhere a transaction requires a
 * large amount of data (anything that would not fit within the
 * transaction size limit).
 *
 * Examples
 *  - smart contract bytecode
 *  - network configuration updates
 *  - network fee schedules
 *  - image files for NFTs
 *  - property title documents
 * There are many other uses; these examples are illustrative.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.block.stream.output;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.hapi.block.stream.output.protoc";
// <<<pbj.java_package = "com.hedera.hapi.block.stream.output">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * Block Stream data for a `fileAppend` transaction.
 *
 * This message SHALL NOT duplicate information already contained
 * in the original transaction.
 */
message AppendFileOutput {}

/**
 * Block Stream data for a `fileCreate` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message CreateFileOutput {}

/**
 * Block Stream data for a `fileDelete` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message DeleteFileOutput {}

/**
 * Block Stream data for a `fileUpdate` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message UpdateFileOutput {}

/**
 * Block Stream data for a `systemDelete` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message SystemDeleteOutput {}

/**
 * Block Stream data for a `systemUndelete` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message SystemUndeleteOutput {}
