/**
 * # Util Service
 * Block stream messages that report the results of transactions handled by
 * the `Util` service.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.block.stream.output;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.hapi.block.stream.output.protoc";
// <<<pbj.java_package = "com.hedera.hapi.block.stream.output">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * Block data produced by `prng` transactions submitted to the `Util` service.
 *
 * The `entropy` reported in this block stream message is deterministically
 * produced, but has high dispersion and is very difficult to predict.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message UtilPrngOutput {
  oneof entropy {
    /**
     * A deterministic pseudo-random sequence of 48 bytes.
     * <p>
     * This value SHALL be the result of a corresponding
     * `UtilService` `prng` transaction.
     */
    bytes prng_bytes = 1;

    /**
     * A deterministic pseudo-random number generated within a
     * specified range.
     * <p>
     * This value SHALL be the result of a corresponding `UtilService`
     * `prng` transaction.<br/>
     * Note that the transaction only permits a non-negative range, the
     * output SHALL always be a whole number.
     */
    uint32 prng_number = 2;
  }
}
