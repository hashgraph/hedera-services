/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.swirlds.platform.config;

import com.swirlds.config.api.ConfigData;
import com.swirlds.config.api.ConfigProperty;
import java.time.Duration;

/**
 * Config that control the SignedStateManager and SignedStateFileManager behaviors.
 *
 * @param saveStatePeriod               The frequency of writes of a state to disk every this many seconds (0 to never
 *                                      write).
 * @param signedStateDisk               Keep at least this many of the old complete signed states on disk. This should
 *                                      be at least 2 so that  we don't delete an old state while a new one is in the
 *                                      process of writing to disk. set to 0 to not keep any states to disk.
 * @param haltOnAnyIss                  <p>
 *                                      Halt this node whenever any ISS in the network is detected. A halt causes the
 *                                      node to stop doing work, but does not shut down the JVM.
 *                                      </p>
 *
 *                                      <p>
 *                                      This feature is for debugging purposes only. Enabling this feature in production
 *                                      environments enables a very simple denial of service attack on the network.
 *                                      </p>
 * @param automatedSelfIssRecovery      If true, then attempt to recover automatically when a self ISS is detected.
 * @param haltOnCatastrophicIss         If true, then halt this node if a catastrophic ISS is detected. A halt causes
 *                                      the node to stop doing work, but does not shut down the JVM.
 * @param secondsBetweenIssLogs         The minimum time that must pass between log messages about ISS events. If ISS
 *                                      events happen with a higher frequency then they are squelched.
 * @param enableHashStreamLogging       When enabled, hashes for the nodes are logged per round.
 * @param debugHashDepth                When logging debug information about the hashes in a merkle tree, do not display
 *                                      hash information for nodes deeper than this.
 * @param maxAgeOfFutureStateSignatures It's possible to receive state signatures before it's time to process the round
 *                                      signed by the signature. This is the maximum number of rounds, in the future,
 *                                      for which a node will accept a state signature.
 * @param roundsToKeepForSigning        The maximum number of rounds that a state will be kept in memory while waiting
 *                                      for it to gather enough signatures. If a state becomes fully signed prior to
 *                                      reaching this age it may be removed from memory.
 * @param roundsToKeepAfterSigning      FUTURE WORK: Review this config value. It is only referenced by
 *                                      {@code SequentialSignaturesTest} and {@code AbstractStateSignatureCollectorTest}
 *                                      by the autogenerated constant {@code StateConfig_.ROUNDS_TO_KEEP_AFTER_SIGNING}
 *                                      The number of rounds to keep states after they have been signed and after a
 *                                      newer state has become fully signed. If set to 0 then each state becomes garbage
 *                                      collection eligible as soon as it is not the most recently signed state.
 * @param suspiciousSignedStateAge      The age of a signed state which is considered to be suspicious. Suspicious
 *                                      states cause a large amount of data to be logged that helps to debug the
 *                                      potential state leak.
 * @param signedStateAgeNotifyRateLimit The minimum period between notifications of suspiciously old signed states.
 * @param stateHistoryEnabled           If true, then a history of operations that modify the signed state reference
 *                                      count are kept for debugging purposes.
 * @param debugStackTracesEnabled       if true and stateHistoryEnabled is true, then stack traces are captured each
 *                                      time a signed state reference count is changed, and logged if a signed state
 *                                      reference count bug is detected.
 * @param emergencyStateFileName        The name of the file that contains the emergency state.
 * @param deleteInvalidStateFiles       At startup time, if a state can not be deserialized without errors, should we
 *                                      delete that state from disk and try another? If true then states that can't be
 *                                      parsed are deleted. If false then a node will crash if it can't parse a state
 *                                      file. Possibly useful if a node (or nodes) have corrupted state files. Be very
 *                                      careful enabling this network wide. If this is enabled and all states on disk
 *                                      have deserialization bugs, then all nodes will delete all state copies and the
 *                                      network will restart from genesis.
 * @param validateInitialState          If false then do not do ISS validation on the state loaded from disk at startup.
 *                                      This should always be enabled in production environments. Disabling initial
 *                                      state validation is intended to be a test-only feature.
 * @param maxSignatureResubmitAge       The maximum age of a signature that can be resubmitted (if the host event
 *                                      becomes stale). If a signature is older than this value, it will not be
 *                                      resubmitted. Age is measured by taking the round number of the most recent round
 *                                      to reach consensus and subtracting the round that the signature transaction
 *                                      signs.
 */
@ConfigData("state")
public record StateConfig(
        @ConfigProperty(defaultValue = "") String mainClassNameOverride,
        @ConfigProperty(defaultValue = "900") int saveStatePeriod,
        @ConfigProperty(defaultValue = "5") int signedStateDisk,
        @ConfigProperty(defaultValue = "false") boolean haltOnAnyIss,
        @ConfigProperty(defaultValue = "false") boolean automatedSelfIssRecovery,
        @ConfigProperty(defaultValue = "false") boolean haltOnCatastrophicIss,
        @ConfigProperty(defaultValue = "300") long secondsBetweenIssLogs,
        @ConfigProperty(defaultValue = "true") boolean enableHashStreamLogging,
        @ConfigProperty(defaultValue = "5") int debugHashDepth,
        @ConfigProperty(defaultValue = "1000") int maxAgeOfFutureStateSignatures,
        @ConfigProperty(defaultValue = "26") int roundsToKeepForSigning,
        @ConfigProperty(defaultValue = "0") int roundsToKeepAfterSigning,
        @ConfigProperty(defaultValue = "5m") Duration suspiciousSignedStateAge,
        @ConfigProperty(defaultValue = "10m") Duration signedStateAgeNotifyRateLimit,
        @ConfigProperty(defaultValue = "false") boolean stateHistoryEnabled,
        @ConfigProperty(defaultValue = "false") boolean debugStackTracesEnabled,
        @ConfigProperty(defaultValue = "emergencyRecovery.yaml") String emergencyStateFileName,
        @ConfigProperty(defaultValue = "false") boolean deleteInvalidStateFiles,
        @ConfigProperty(defaultValue = "true") boolean validateInitialState,
        @ConfigProperty(defaultValue = "500") long maxSignatureResubmitAge) {

    /**
     * Get the main class name that should be used for signed states.
     *
     * @param defaultMainClassName the default main class name derived from the SwirldMain name.
     * @return the main class name that should be used for signed states
     */
    public String getMainClassName(final String defaultMainClassName) {
        return mainClassNameOverride.isEmpty() ? defaultMainClassName : mainClassNameOverride;
    }
}
