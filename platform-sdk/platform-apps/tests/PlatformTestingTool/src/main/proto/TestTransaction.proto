// SPDX-License-Identifier: Apache-2.0
syntax = "proto3";
package proto;

option java_package = "com.swirlds.demo.platform.fs.stresstest.proto";
option java_multiple_files = true;

message RandomBytesTransaction {
  bool isInserSeq = 1; //whether insert sequence number in random bytes
  bytes data = 2;
}

message CreateAccountFCQ {
  int64 shardID = 1;
  int64 realmID = 2;
  int64 accountID = 3;
  int64 balance = 4;
  int64 index = 5;
  bytes content = 6;
  int64 initialRecordNum = 7;
}

message UpdateAccountFCQ {
  int64 shardID = 1;
  int64 realmID = 2;
  int64 accountID = 3;
  int64 balance = 4;
  int64 index = 5;
  bytes content = 6;
}

message TransferBalanceFCQ {
  int64 fromShardID = 1;
  int64 fromRealmID = 2;
  int64 fromAccountID = 3;

  int64 toShardID = 4;
  int64 toRealmID = 5;
  int64 toAccountID = 6;

  int64 transferAmount = 7;
  bytes newFromContent = 8;
  bytes newToContent = 9;
}

message CreateAccount {
  int64 shardID = 1;
  int64 realmID = 2;
  int64 accountID = 3;
  int64 balance = 4;
  int64 sendThreshold = 5;
  int64 receiveThreshold = 6;
  bool requireSignature = 7;
  int64 uid = 8;
}

message TransferBalance {
  int64 fromShardID = 1;
  int64 fromRealmID = 2;
  int64 fromAccountID = 3;

  int64 toShardID = 4;
  int64 toRealmID = 5;
  int64 toAccountID = 6;

  int64 transferAmount = 7;
}

message AccountSubset {
  int32 accountRange = 1;
}

message AccountSubsetFCQ {
  int32 accountRange = 1;
}

message DeleteFCQNode {
  int64 shardID = 1;
  int64 realmID = 2;
  int64 accountID = 3;
  int64 index = 4;
}

message DeleteFCQ {
  int64 shardID = 1;
  int64 realmID = 2;
  int64 accountID = 3;
}

message DeleteAccount {
  int64 shardID = 1;
  int64 realmID = 2;
  int64 accountID = 3;
}

message UpdateAccount {
  int64 shardID = 1;
  int64 realmID = 2;
  int64 accountID = 3;
  int64 balance = 4;
  int64 sendThreshold = 5;
  int64 receiveThreshold = 6;
  bool requireSignature = 7;
}

message AssortedAccount {
  int64 shardID = 1;
  int64 realmID = 2;
  int64 accountID = 3;

  int64 shardIdTo = 4;
  int64 realmIdTo = 5;
  int64 accountIdTo = 6;

  int64 amountBalance = 7;
  int64 sendThreshold = 8;
  int64 receiveThreshold = 9;
  bool requireSignature = 10;

  FCMTxType txType = 11;
}

message AssortedFCQ {
  int64 shardID = 1;
  int64 realmID = 2;
  int64 accountID = 3;

  int64 amountBalance = 4;
  int64 index = 5;
  bytes content = 6;
  int64 initialRecordNum = 7;

  int64 toShardID = 8;
  int64 toRealmID = 9;
  int64 toAccountID = 10;
  bytes newToContent = 11;

  FCQTxType txType = 12;
}

message FCMTransaction {
  oneof body {
    CreateAccount createAccount = 1;
    TransferBalance transferBalance = 2;
    DeleteAccount deleteAccount = 3;
    UpdateAccount updateAccount = 4; // value 6-9 has been used, so should not be reused
    CreateAccountFCQ createAccountFCQ = 19;
    UpdateAccountFCQ updateAccountFCQ = 20;
    TransferBalanceFCQ transferBalanceFCQ = 21;
    DeleteFCQNode deleteFCQNode = 22; // value 23 has been used, so should not be reused
    Activity activity = 25;
    DeleteFCQ deleteFCQ = 27;
    AssortedAccount assortedAccount = 28;
    AssortedFCQ assortedFCQ = 30;
    AccountSubset accountSubset = 31;
    AccountSubsetFCQ accountSubsetFCQ = 32;
    MintToken mintToken = 33;
    TransferToken transferToken = 34;
    BurnToken burnToken = 35;
    DummyTransaction dummyTransaction = 36;
  }
  bytes paddingBytes = 5;
  bool invalidSig = 24;
  int64 originNode = 26;
}

message Activity {
  enum ActivityType {
    SAVE_EXPECTED_MAP = 0;
  }
  ActivityType type = 1;
}

enum ControlType {
  INVALID = 0;
  ENTER_VALIDATION = 1;
  EXIT_VALIDATION = 2;
  ENTER_SYNC = 3;
  EXIT_SYNC = 4;
}

enum FCMTxType {
  Create = 0;
  Transfer = 1;
  Update = 2;
  Delete = 3;
}

enum FCQTxType {
  FCQCreate = 0;
  FCQTransfer = 1;
  FCQUpdate = 2;
  FCQDelete = 3;
}

message ControlTransaction {
  ControlType type = 1;
  int32 duration = 2;
}

message FreezeTransaction {
  int64 startTimeEpochSecond = 5; // value 1-4 has been used, so should not be reused
}

enum SimpleAction {
  CAUSE_ISS = 0;
}

message StateSignatureTransaction {
  int64 round = 1;
  bytes signature = 2;
  bytes hash = 3;
}

message TestTransaction {
  oneof body {
    RandomBytesTransaction bytesTransaction = 1;
    VirtualMerkleTransaction virtualMerkleTransaction = 2;
    FCMTransaction fcmTransaction = 3;
    ControlTransaction controlTransaction = 4;
    FreezeTransaction freezeTransaction = 5;
    SimpleAction simpleAction = 6;
    StateSignatureTransaction stateSignatureTransaction = 7;
  }
}

enum AppTransactionSignatureType {
    ED25519 = 0;
    RSA = 1;
    ECDSA_SECP256K1 = 2;
}

message TestTransactionWrapper {
    bytes testTransactionRawBytes = 1;
    bytes signaturesRawBytes = 2;
    bytes publicKeyRawBytes = 3;
    AppTransactionSignatureType signatureType = 4;
}

message CreateSmartContract {
  int64 contractId = 1;
  int64 totalValuePairs = 2;
  int64 seed = 3;
  int32 byteCodeSize = 4;
}

message SmartContractMethodExecution {
  int64 contractId = 1;
  int64 seed = 2;
  int64 reads = 3;
  int64 writes = 4;
  int64 adds = 5;
}

message VirtualMerkleTransaction {
  oneof body {
    CreateAccount createAccount = 1;
    UpdateAccount updateAccount = 2;
    DeleteAccount deleteAccount = 3;
    CreateSmartContract smartContract = 4;
    SmartContractMethodExecution methodExecution = 5;
  }
  bytes paddingBytes = 6;
  int64 originNode = 7;
  bool sampled = 8;
}

message MintToken {
  int64 shardId = 1;
  int64 realmId = 2;
  int64 accountId = 3;
  int64 tokenShardId = 4;
  int64 tokenRealmId = 5;
  int64 tokenId = 6;
  string serialNumber = 7;
  string memo = 8;
}

message TransferToken {
  int64 toShardId = 1;
  int64 toRealmId = 2;
  int64 toAccountId = 3;
  int64 tokenShardId = 4;
  int64 tokenRealmId = 5;
  int64 tokenId = 6;
}

message BurnToken {
  int64 tokenShardId = 1;
  int64 tokenRealmId = 2;
  int64 tokenId = 3;
}

message DummyTransaction{
}
