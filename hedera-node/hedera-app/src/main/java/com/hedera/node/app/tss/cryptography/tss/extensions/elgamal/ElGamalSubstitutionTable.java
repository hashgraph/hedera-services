/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hedera.node.app.tss.cryptography.tss.extensions.elgamal;

import com.hedera.node.app.tss.cryptography.bls.SignatureSchema;
import com.hedera.node.app.tss.cryptography.pairings.api.Field;
import com.hedera.node.app.tss.cryptography.pairings.api.FieldElement;
import com.hedera.node.app.tss.cryptography.pairings.api.Group;
import com.hedera.node.app.tss.cryptography.pairings.api.GroupElement;
import edu.umd.cs.findbugs.annotations.NonNull;
import edu.umd.cs.findbugs.annotations.Nullable;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * A substitution table to create and read CipherTexts
 * @param <T> Target type
 * @param <S> Source type
 */
public interface ElGamalSubstitutionTable<T, S> {

    /**
     * Gets the replacement value given a key.
     * @param key the
     * @return the replacement value given corresponding to the key or null if not found.
     */
    @Nullable
    T get(@NonNull S key);

    /**
     * Generates a substitution table mapping byte values to their corresponding {@link FieldElement} values.
     *
     * <p>This map is used during encryption to substitute byte values with corresponding field elements.
     *
     * @param signatureSchema defines which elliptic curve is used in the protocol, and how it's used
     * @return a map of byte values to {@link FieldElement} used for encryption
     */
    @NonNull
    static ElGamalSubstitutionTable<FieldElement, Byte> direct(@NonNull final SignatureSchema signatureSchema) {
        final Field field = Objects.requireNonNull(signatureSchema, "signatureSchema must not be null")
                .getPairingFriendlyCurve()
                .field();

        final Map<Byte, FieldElement> elGamalSubstitutionTable = new HashMap<>();
        for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {
            elGamalSubstitutionTable.put((byte) i, field.fromLong(Byte.toUnsignedInt((byte) i)));
        }
        return new Direct(elGamalSubstitutionTable);
    }

    /**
     * Generates an inverse substitution table used to map a {@link GroupElement} to its corresponding byte value.
     *
     * <p>This map is used during decryption to obtain the original byte value from a group element generated by multiplying
     * the group generator by the byte value.
     *
     * @param signatureSchema defines which elliptic curve is used in the protocol, and how it's used
     * @return a map of {@link GroupElement} to byte values used for decryption
     */
    @NonNull
    static ElGamalSubstitutionTable<Byte, GroupElement> inverse(@NonNull final SignatureSchema signatureSchema) {
        final Field field = Objects.requireNonNull(signatureSchema, "signatureSchema must not be null")
                .getPairingFriendlyCurve()
                .field();
        final Group encryptionGroup = signatureSchema.getPublicKeyGroup();
        final Map<GroupElement, Byte> elGamalInverseSubstitutionTable = new HashMap<>();

        final GroupElement generator = encryptionGroup.generator();
        for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {
            final GroupElement key = generator.multiply(field.fromLong(Byte.toUnsignedInt((byte) i)));
            elGamalInverseSubstitutionTable.put(key, (byte) i);
        }
        return new Inverse(elGamalInverseSubstitutionTable);
    }

    /**
     * An implementation of the table
     * @param table the support for the table instance
     */
    record Direct(Map<Byte, FieldElement> table) implements ElGamalSubstitutionTable<FieldElement, Byte> {
        public FieldElement get(@NonNull final Byte key) {
            return table.get(key);
        }
    }

    /**
     * An implementation of the table
     * @param table the support for the table instance
     */
    record Inverse(Map<GroupElement, Byte> table) implements ElGamalSubstitutionTable<Byte, GroupElement> {
        public Byte get(@NonNull final GroupElement key) {
            return table.get(key);
        }
    }
}
