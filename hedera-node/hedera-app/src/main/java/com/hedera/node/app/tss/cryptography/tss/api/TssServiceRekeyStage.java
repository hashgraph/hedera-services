/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hedera.node.app.tss.cryptography.tss.api;

import com.hedera.node.app.tss.cryptography.bls.BlsPublicKey;
import edu.umd.cs.findbugs.annotations.NonNull;
import edu.umd.cs.findbugs.annotations.Nullable;
import java.util.List;

/**
 * The Threshold Signature Scheme (TSS) Rekey Stage is where all participants redistribute their key material and generate a new set of keys that
 * aggregate to the same aggregated public key (ledgerId) as before
 * <p>
 * Contract:
 * <ul>
 *     <li>Generate a {@link TssMessage} from a {@link TssPrivateShare}</li>
 *     <li>Verify {@link TssMessage}s with a {@link TssParticipantDirectory},
 *        and all previous {@link TssPublicShare}</li>
 *     <li>Obtain a stateful {@link TssShareExtractor} from a {@link TssParticipantDirectory} and a list of <strong>previously verified</strong> {@link TssMessage}s</li>
 * </ul>
 *
 * The aggregation of the obtained {@link TssPublicShare}s using {@link TssPublicShare#aggregate(List)}
 *  will retrieve the same previously generated aggregated {@link BlsPublicKey} (known as ledgerId)
 */
public interface TssServiceRekeyStage {
    /**
     * Generate a {@link TssMessage} for a {@code tssParticipantDirectory}, for the specified {@link TssPrivateShare}.
     *
     * @param tssParticipantDirectory the candidate tss directory
     * @param privateShare the key material to redistribute
     * @return a TssMessage for the requested share.
     */
    @NonNull
    TssMessage generateTssMessage(
            @NonNull TssParticipantDirectory tssParticipantDirectory, @NonNull TssPrivateShare privateShare);

    /**
     * Verify that a {@link TssMessage} is valid against the zk proof and the list of {@code previousPublicShares}.
     * The library does not check that the messages were previously validated to process them.
     * It is responsibility of callers to make sure this call happens before doing any processing of the message.
     *
     * @param participantDirectory the candidate directory
     * @param previousPublicShares if available, the list of previously existent {@link TssPublicShare}s.
     *                             This allows to strengthen the verification of the messages.
     * @param tssMessage the {@link TssMessage} to validate
     * @return true if the message is valid, false otherwise
     */
    boolean verifyTssMessage(
            @NonNull TssParticipantDirectory participantDirectory,
            @Nullable List<TssPublicShare> previousPublicShares,
            @NonNull TssMessage tssMessage);

    /**
     *Creates a stateful tssShareExtractor that allows to extract:
     * <ul>
     *      <li>all private shares that belongs to this participant</li>
     *      <li>all public shares for all the participants in the scheme.</li>
     * </ul>
     *<p>
     * It is the responsibility of the caller to ensure:
     * <ul>
     *  <li> that the list of processed {@link TssMessage} messages were previously verified</li>
     *  <li> the number of messages meets the required threshold.
     *     The threshold to be used for this validation is the current threshold and <strong>not</strong> the candidate threshold</li>
     * </ul>
     *
     * The aggregation of the obtained {@link TssPublicShare}s using {@link TssPublicShare#aggregate(List)}
     *  will produce a {@link BlsPublicKey} (known as ledgerId) that is the same
     *  one as the generated by the genesis stage or other previously called rekey stages.
     *
     * @param participantDirectory the candidate tss directory
     * @param validMessages a list of <b>previously verified</b> {@link TssMessage}s
     * @return a stateful instance of the {@link TssShareExtractor}
     */
    TssShareExtractor shareExtractor(
            @NonNull TssParticipantDirectory participantDirectory, @NonNull List<TssMessage> validMessages);
}
