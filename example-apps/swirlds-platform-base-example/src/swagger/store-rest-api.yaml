openapi: 3.0.1
info:
  title: Platform Base Store Example API
  description: Example Store API for managing items, operations, and detailed inventory
  version: 1.0.0

servers:
  - url: 'http://localhost:8000/swirlds/store/'
paths:
  /items:
    post:
      summary: Create a new item
      requestBody:
        description: new item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreation'
      responses:
        '201':
          description: item successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all items
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /items/{itemId}:
    get:
      summary: Get a item
      parameters:
        - name: itemId
          in: path
          description: id of the item to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an Item by id
      parameters:
        - name: itemId
          in: path
          description: Id of the item to delete
          required: true
          schema:
            type: string
      responses:
        '202':
          description: item successfully deleted
        '404':
          description: item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /inventories/{itemId}:
    get:
      summary: Retrieve inventory info for an item
      parameters:
        - name: itemId
          in: path
          description: itemId to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /operations:
    get:
      summary: Retrieve operations based on parameters
      parameters:
        - name: uuid
          in: query
          required: false
          schema:
            type: string
        - name: itemId
          in: query
          required: false
          schema:
            type: string
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: unitaryPriceFrom
          in: query
          required: false
          schema:
            type: number
            format: float
        - name: unitaryPriceTo
          in: query
          required: false
          schema:
            type: number
            format: float
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
        '400':
          description: Search parameters error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new operation
      requestBody:
        description: new transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationInput'
      responses:
        '201':
          description: Operation successfully done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
        '400':
          description: Input error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales:
    post:
      summary: Create a new sale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleInput'
      responses:
        '201':
          description: Sale successfully submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /purchases:
    post:
      summary: Create a new purchase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseInput'
      responses:
        '201':
          description: Purchase successfully submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ItemCreation:
      type: object
      properties:
        description:
          type: string
        sku:
          type: string
        minimumStockLevel:
          type: integer
        category:
          type: string
    Item:
      type: object
      properties:
        description:
          type: string
        sku:
          type: string
        minimumStockLevel:
          type: integer
        category:
          type: string
        id:
          type: string
    OperationInput:
      type: object
      properties:
        details:
          type: array
          items:
            $ref: '#/components/schemas/OperationDetail'
        type:
          $ref: '#/components/schemas/OperationType'
    Operation:
      type: object
      properties:
        uuid:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/OperationDetail'
        timestamp:
          type: integer
        type:
          $ref: '#/components/schemas/OperationType'
    OperationDetail:
      type: object
      properties:
        itemId:
          type: string
        amount:
          type: integer
        unitaryPrice:
          type: number
        mode:
          $ref: '#/components/schemas/StockHandlingMode'
    Inventory:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/Item'
        amount:
          type: integer
        stock:
          type: array
          items:
            $ref: '#/components/schemas/Stock'
        movements:
          type: array
          items:
            $ref: '#/components/schemas/Movement'
    Stock:
      type: object
      properties:
        unitaryPrice:
          type: number
        date:
          type: string
          format: date-time
        quantity:
          type: integer
    Movement:
      type: object
      properties:
        date:
          type: string
          format: date-time
        amount:
          type: integer
        operationUUID:
          type: string
    OperationType:
      type: string
      enum:
        - ADDITION
        - DEDUCTION
    StockHandlingMode:
      type: string
      enum:
        - FIFO
        - LIFO
    SaleInput:
      type: object
      properties:
        itemId:
          type: string
        amount:
          type: integer
        salePrice:
          type: number
        mode:
          type: string
    Sale:
      type: object
      properties:
        uuid:
          type: string
        itemId:
          type: string
        amount:
          type: integer
        salePrice:
          type: number
        mode:
          type: string
        date:
          type: string
          format: date-time
    PurchaseInput:
      type: object
      properties:
        itemId:
          type: string
        amount:
          type: integer
        buyPrice:
          type: number
    Purchase:
      type: object
      properties:
        uuid:
          type: string
        itemId:
          type: string
        amount:
          type: integer
        buyPrice:
          type: number
        date:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        error:
          type: string